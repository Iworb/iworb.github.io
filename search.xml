<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Full Stack (Node + Express + MongoDb + Vue + Nuxt) application. Part 7: Visual part]]></title>
      <url>/2018/02/20/07-nemvn/</url>
      <content type="html"><![CDATA[<p>In the frontend we should save our user in the store. Let’s make new one <code>client/store/auth.js</code>:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> state = <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">  user: <span class="literal">null</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  SET_USER: <span class="function">(<span class="params">state, user</span>) =&gt;</span> &#123;</span><br><span class="line">    state.user = user</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> actions = &#123;</span><br><span class="line">  <span class="keyword">async</span> login (&#123;commit&#125;, &#123;username, password&#125;) &#123;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="keyword">this</span>.$axios.$post(<span class="string">'/login'</span>, &#123;username, password&#125;)</span><br><span class="line">    commit(<span class="string">'SET_USER'</span>, data)</span><br><span class="line">    <span class="keyword">this</span>.$router.push(&#123;<span class="attr">path</span>: <span class="string">'/'</span>&#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">async</span> logout (&#123;commit&#125;) &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="keyword">this</span>.$axios.post(<span class="string">'/logout'</span>)</span><br><span class="line">    commit(<span class="string">'SET_USER'</span>, <span class="literal">null</span>)</span><br><span class="line">    <span class="keyword">this</span>.$router.push(&#123;<span class="attr">path</span>: <span class="string">'/login'</span>&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Each store (Vuex) have it’s own state, mutations and actions. Mutations are sync and actions could be async. For more details read Vuex documentation.<br>We have some new dependencies:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add axios @nuxtjs/axios</span><br></pre></td></tr></table></figure></p>
<p>Axios is package for requests.<br>Good thing abour Nuxt is SSR. You could set user on the server side if there’s user in request. Unfortunately, this action could be performed only in the <code>client/store/index.js</code> point, so let’s make it:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> actions = &#123;</span><br><span class="line">  nuxtServerInit (&#123;commit&#125;, &#123;req&#125;) &#123;</span><br><span class="line">    <span class="keyword">if</span> (req.user) commit(<span class="string">'auth/SET_USER'</span>, req.user)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>NB: commit to <code>auth</code> storage and call <code>SET_USER</code> mutation.<br>Now let’s change <code>index.vue</code> page:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">        &lt;h1&gt;Please login to see the secret content&lt;/h1&gt;</span><br><span class="line">        &lt;form v-if=&quot;!$store.state.auth.user&quot; @submit.prevent=&quot;login&quot;&gt;</span><br><span class="line">            &lt;p class=&quot;error&quot; v-if=&quot;formError&quot;&gt;&#123;&#123; formError &#125;&#125;&lt;/p&gt;</span><br><span class="line">            &lt;p&gt;&lt;i&gt;To login, use &lt;b&gt;camin&lt;/b&gt; as username and &lt;b&gt;qwe123&lt;/b&gt; as password.&lt;/i&gt;&lt;/p&gt;</span><br><span class="line">            &lt;p&gt;Username: &lt;input type=&quot;text&quot; v-model=&quot;formUsername&quot; name=&quot;username&quot; /&gt;&lt;/p&gt;</span><br><span class="line">            &lt;p&gt;Password: &lt;input type=&quot;password&quot; v-model=&quot;formPassword&quot; name=&quot;password&quot; /&gt;&lt;/p&gt;</span><br><span class="line">            &lt;button type=&quot;submit&quot;&gt;Login&lt;/button&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line">        &lt;div v-else&gt;</span><br><span class="line">            Hello &#123;&#123; $store.state.auth.user.name &#125;&#125;!</span><br><span class="line">            &lt;pre&gt;I am the secret content, I am shown only when the use is connected.&lt;/pre&gt;</span><br><span class="line">            &lt;p&gt;&lt;i&gt;You can also refresh this page, you&apos;ll still be connected!&lt;/i&gt;&lt;/p&gt;</span><br><span class="line">            &lt;button @click=&quot;logout&quot;&gt;Logout&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">      data () &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">          formError: null,</span><br><span class="line">          formUsername: &apos;&apos;,</span><br><span class="line">          formPassword: &apos;&apos;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        async login() &#123;</span><br><span class="line">          try &#123;</span><br><span class="line">            await this.$store.dispatch(&apos;auth/login&apos;, &#123;</span><br><span class="line">              username: this.formUsername,</span><br><span class="line">              password: this.formPassword</span><br><span class="line">            &#125;)</span><br><span class="line">            this.formUsername = &apos;&apos;</span><br><span class="line">            this.formPassword = &apos;&apos;</span><br><span class="line">            this.formError = null</span><br><span class="line">          &#125; catch (e) &#123;</span><br><span class="line">            this.formError = e.message</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        async logout() &#123;</span><br><span class="line">          try &#123;</span><br><span class="line">            await this.$store.dispatch(&apos;auth/logout&apos;)</span><br><span class="line">          &#125; catch (e) &#123;</span><br><span class="line">            this.formError = e.message</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;stylus&quot;&gt;</span><br><span class="line">    .container</span><br><span class="line">        padding 100px</span><br><span class="line">    .error</span><br><span class="line">        color red</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p>
<p>Now we can login and stayed login until logout.</p>
<h2 id="Visual-framework-Vuetify"><a href="#Visual-framework-Vuetify" class="headerlink" title="Visual framework: Vuetify"></a>Visual framework: Vuetify</h2><p>There’s two popular frameworks for material design: <a href="Vuetifyjs.com">Vuetify</a> and <a href="http://quasar-framework.org" target="_blank" rel="noopener">Quasar</a>.<br>Personally I prefer Quasar, because he has more use cases. But it does not support SSR currently (v0.15.0-beta.13), so I have to use Vuetify:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add vuetify roboto-fontface nuxt-material-design-icons</span><br></pre></td></tr></table></figure></p>
<p>NB: <code>nuxt-material-design-icons</code> takes really long time to install, so be patient.<br>Let’s extend our <code>nuxt.config.js</code> to include all things:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  loading: &#123;<span class="attr">color</span>: <span class="string">'#3B8070'</span>&#125;,</span><br><span class="line">  srcDir: <span class="string">'client/'</span>,</span><br><span class="line">  <span class="comment">// [1]</span></span><br><span class="line">  build: &#123;</span><br><span class="line">    vendor: [</span><br><span class="line">      <span class="string">'vuetify'</span>,</span><br><span class="line">      <span class="string">'axios'</span>,</span><br><span class="line">      <span class="string">'roboto-fontface'</span></span><br><span class="line">    ],</span><br><span class="line">    extractCss: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// [2]</span></span><br><span class="line">  modules: [</span><br><span class="line">    <span class="string">'@nuxtjs/axios'</span>,</span><br><span class="line">    <span class="string">'nuxt-material-design-icons'</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// [3]</span></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="string">'~/plugins/axios'</span>,</span><br><span class="line">    <span class="string">'~plugins/vuetify.js'</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// [4]</span></span><br><span class="line">  css: [</span><br><span class="line">    <span class="string">`~assets/style/app.styl`</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// [5]</span></span><br><span class="line">  router: &#123;</span><br><span class="line">    middleware: <span class="string">'auth'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Nuxt can build single vendor package [1]. It’s good way to pack frequently using libraries, so let’s include <code>vuetify</code>, <code>axios</code> and <code>roboto-fontface</code> into vendor build.<br>Next thing is modules [2] which extends default Nuxt functionality.<br>Plugins [3] are our custom plugins for <code>Vuetify</code> and some error handling for <code>axios</code>.<br>Custom css [4] lands in <code>css</code> property.<br>To restrict our routes to authenticated users we could set middleware [5].<br>Plugins, css and middlewares are things that should be written by yourself, because they’re extend Nuxt functionality for your own purposes.<br>Let’s take a look at plugins.<br><code>client/plugins/axios.js</code> - redirect to the <code>login</code> page if you not authorized anymore:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params">&#123;$axios, redirect&#125;</span>) </span>&#123;</span><br><span class="line">  $axios.onError(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> code = <span class="built_in">parseInt</span>(error.response &amp;&amp; error.response.status)</span><br><span class="line">    <span class="keyword">if</span> (code === <span class="number">401</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> redirect(<span class="string">'/login'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>client/plugins/vuetify.js</code> - include <code>Vuetify</code> with custom colors:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuetify <span class="keyword">from</span> <span class="string">'vuetify'</span></span><br><span class="line"><span class="keyword">import</span> colors <span class="keyword">from</span> <span class="string">'vuetify/es5/util/colors'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuetify, &#123;</span><br><span class="line">  theme:</span><br><span class="line">    &#123;</span><br><span class="line">      primary: colors.purple.base,</span><br><span class="line">      secondary: colors.grey.lighten1,</span><br><span class="line">      accent: colors.purple.lighten3,</span><br><span class="line">      error: colors.red.darken4,</span><br><span class="line">      warning: colors.amber.darken1,</span><br><span class="line">      info: colors.blue.darken4,</span><br><span class="line">      success: colors.green.darken3</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>Our css file is simple atm. <code>client/assets/style/app.styl</code>:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@require <span class="string">'~vuetify/src/stylus/main.styl'</span></span><br><span class="line"></span><br><span class="line">.page</span><br><span class="line">  @extend .fade-<span class="attribute">transition</span></span><br></pre></td></tr></table></figure></p>
<p>And last thing is middleware <code>client/middleware/auth.js</code>:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params">&#123;store, redirect&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!store.state.auth.user) &#123;</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">'/login'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Layouts-and-pages"><a href="#Layouts-and-pages" class="headerlink" title="Layouts and pages"></a>Layouts and pages</h2><p>Let’s split our login page and index one.<br>This pages should has different layout - clean for login and drawer based for other pages.<br>Clean layout is simple <code>client/layouts/clean.vue</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;v-app&gt;</span><br><span class="line">        &lt;nuxt/&gt;</span><br><span class="line">    &lt;/v-app&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></p>
<p>But <code>client/layouts/default.vue</code> is bit complicated:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;v-app&gt;</span><br><span class="line">        &lt;!-- [1] --&gt;</span><br><span class="line">        &lt;v-navigation-drawer</span><br><span class="line">                clipped</span><br><span class="line">                fixed</span><br><span class="line">                :value=&quot;$store.state.drawer&quot;</span><br><span class="line">                app</span><br><span class="line">        &gt;</span><br><span class="line">            &lt;v-list dense&gt;</span><br><span class="line">                &lt;v-list-tile router v-for=&quot;(item, i) in items&quot; :key=&quot;i&quot; :to=&quot;item.to&quot;&gt;</span><br><span class="line">                    &lt;v-list-tile-action&gt;</span><br><span class="line">                        &lt;v-icon v-html=&quot;item.icon&quot;&gt;&lt;/v-icon&gt;</span><br><span class="line">                    &lt;/v-list-tile-action&gt;</span><br><span class="line">                    &lt;v-list-tile-content&gt;</span><br><span class="line">                        &lt;v-list-tile-title v-text=&quot;item.title&quot;&gt;&lt;/v-list-tile-title&gt;</span><br><span class="line">                    &lt;/v-list-tile-content&gt;</span><br><span class="line">                &lt;/v-list-tile&gt;</span><br><span class="line">                &lt;v-list-tile @click.stop=&quot;logoutDialog = true&quot;&gt;</span><br><span class="line">                    &lt;v-list-tile-action&gt;</span><br><span class="line">                        &lt;v-icon&gt;all_out&lt;/v-icon&gt;</span><br><span class="line">                    &lt;/v-list-tile-action&gt;</span><br><span class="line">                    &lt;v-list-tile-content&gt;</span><br><span class="line">                        &lt;v-list-tile-title&gt;Sign Out&lt;/v-list-tile-title&gt;</span><br><span class="line">                    &lt;/v-list-tile-content&gt;</span><br><span class="line">                &lt;/v-list-tile&gt;</span><br><span class="line">            &lt;/v-list&gt;</span><br><span class="line">        &lt;/v-navigation-drawer&gt;</span><br><span class="line">        &lt;v-toolbar app fixed clipped-left color=&quot;primary&quot; dark&gt;</span><br><span class="line">            &lt;v-toolbar-side-icon @click.prevent=&quot;$store.commit(&apos;TOGGLE_DRAWER&apos;)&quot;/&gt;</span><br><span class="line">            &lt;v-toolbar-title&gt;Application&lt;/v-toolbar-title&gt;</span><br><span class="line">        &lt;/v-toolbar&gt;</span><br><span class="line">        &lt;v-content&gt;</span><br><span class="line">            &lt;v-container fluid fill-height&gt;</span><br><span class="line">                &lt;nuxt /&gt;</span><br><span class="line">            &lt;/v-container&gt;</span><br><span class="line">        &lt;/v-content&gt;</span><br><span class="line">        &lt;v-dialog</span><br><span class="line">                v-model=&quot;logoutDialog&quot;</span><br><span class="line">                max-width=&quot;500px&quot;</span><br><span class="line">        &gt;</span><br><span class="line">            &lt;v-card tile&gt;</span><br><span class="line">                &lt;v-toolbar card dark color=&quot;error&quot;&gt;</span><br><span class="line">                    &lt;v-toolbar-title&gt;Sign Out&lt;/v-toolbar-title&gt;</span><br><span class="line">                &lt;/v-toolbar&gt;</span><br><span class="line">                &lt;v-card-text&gt;</span><br><span class="line">                    Do you really want to logout?</span><br><span class="line">                &lt;/v-card-text&gt;</span><br><span class="line">                &lt;v-card-actions&gt;</span><br><span class="line">                    &lt;v-spacer&gt;&lt;/v-spacer&gt;</span><br><span class="line">                    &lt;v-btn color=&quot;primary&quot; flat @click.stop=&quot;logoutDialog = false&quot;&gt;No&lt;/v-btn&gt;</span><br><span class="line">                    &lt;v-btn color=&quot;error&quot; @click.stop=&quot;logout&quot;&gt;Yes&lt;/v-btn&gt;</span><br><span class="line">                &lt;/v-card-actions&gt;</span><br><span class="line">            &lt;/v-card&gt;</span><br><span class="line">        &lt;/v-dialog&gt;</span><br><span class="line">    &lt;/v-app&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        logoutDialog: false,</span><br><span class="line">        items: [</span><br><span class="line">          &#123; icon: &quot;home&quot;, title: &quot;Home&quot;, to: &quot;/&quot; &#125;,</span><br><span class="line">          &#123; icon: &quot;face&quot;, title: &quot;Demo&quot;, to: &quot;/demo&quot; &#125;,</span><br><span class="line">          &#123; icon: &quot;view_list&quot;, title: &quot;Posts&quot;, to: &quot;/posts&quot; &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      async logout () &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">          await this.$store.dispatch(&apos;auth/logout&apos;)</span><br><span class="line">        &#125; catch (e) &#123;</span><br><span class="line">          console.log(e.message)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>
<p>There’s some new things to know.<br>Drawer visibility property [1] is moved to an index store and toggle with mutation <code>client/store/index.js</code>:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> state = <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">  drawer: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  TOGGLE_DRAWER (state) &#123;</span><br><span class="line">    state.drawer = !state.drawer</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> actions = &#123;</span><br><span class="line">  nuxtServerInit (&#123;commit&#125;, &#123;req&#125;) &#123;</span><br><span class="line">    <span class="keyword">if</span> (req.user) commit(<span class="string">'auth/SET_USER'</span>, req.user)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Now let’s make <code>client/pages/login,vue</code> page:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;v-content&gt;</span><br><span class="line">        &lt;v-container fluid fill-height&gt;</span><br><span class="line">            &lt;v-layout align-center justify-center&gt;</span><br><span class="line">                &lt;v-flex xs12 sm8 md4&gt;</span><br><span class="line">                    &lt;v-form @submit.prevent=&quot;login&quot;&gt;</span><br><span class="line">                        &lt;v-card class=&quot;elevation-12&quot;&gt;</span><br><span class="line">                            &lt;v-toolbar dark color=&quot;primary&quot;&gt;</span><br><span class="line">                                &lt;v-toolbar-title&gt;Sign In&lt;/v-toolbar-title&gt;</span><br><span class="line">                            &lt;/v-toolbar&gt;</span><br><span class="line">                            &lt;v-card-text&gt;</span><br><span class="line"></span><br><span class="line">                                &lt;v-text-field</span><br><span class="line">                                        prepend-icon=&quot;person&quot;</span><br><span class="line">                                        v-model=&quot;form.login.values.username&quot;</span><br><span class="line">                                        label=&quot;Username&quot;</span><br><span class="line">                                        type=&quot;text&quot;</span><br><span class="line">                                        :error-messages=&quot;form.login.errors.username&quot;</span><br><span class="line">                                &gt;&lt;/v-text-field&gt;</span><br><span class="line">                                &lt;v-text-field</span><br><span class="line">                                        prepend-icon=&quot;lock&quot;</span><br><span class="line">                                        v-model=&quot;form.login.values.password&quot;</span><br><span class="line">                                        label=&quot;Password&quot;</span><br><span class="line">                                        :append-icon=&quot;e1 ? &apos;visibility&apos; : &apos;visibility_off&apos;&quot;</span><br><span class="line">                                        :append-icon-cb=&quot;() =&gt; (e1 = !e1)&quot;</span><br><span class="line">                                        :type=&quot;e1 ? &apos;password&apos; : &apos;text&apos;&quot;</span><br><span class="line">                                        :error-messages=&quot;form.login.errors.password&quot;</span><br><span class="line">                                &gt;&lt;/v-text-field&gt;</span><br><span class="line"></span><br><span class="line">                            &lt;/v-card-text&gt;</span><br><span class="line">                            &lt;v-card-actions&gt;</span><br><span class="line">                                &lt;v-spacer&gt;&lt;/v-spacer&gt;</span><br><span class="line">                                &lt;v-btn color=&quot;primary&quot; type=&quot;submit&quot;&gt;Sign In&lt;/v-btn&gt;</span><br><span class="line">                            &lt;/v-card-actions&gt;</span><br><span class="line">                        &lt;/v-card&gt;</span><br><span class="line">                    &lt;/v-form&gt;</span><br><span class="line">                &lt;/v-flex&gt;</span><br><span class="line">            &lt;/v-layout&gt;</span><br><span class="line">        &lt;/v-container&gt;</span><br><span class="line">    &lt;/v-content&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  // [1]</span><br><span class="line">  import &#123;resetFormErrors, catchFormErrors&#125; from &apos;../mixins&apos;</span><br><span class="line"></span><br><span class="line">  export default &#123;</span><br><span class="line">    // [2]</span><br><span class="line">    layout: &apos;clean&apos;,</span><br><span class="line">    middleware: [],</span><br><span class="line">    mixins: [resetFormErrors, catchFormErrors],</span><br><span class="line">    data () &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        e1: true,</span><br><span class="line">        form: &#123;</span><br><span class="line">          login: &#123;</span><br><span class="line">            values: &#123;</span><br><span class="line">              username: &apos;&apos;,</span><br><span class="line">              password: &apos;&apos;</span><br><span class="line">            &#125;,</span><br><span class="line">            errors: &#123;</span><br><span class="line">              username: [],</span><br><span class="line">              password: []</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      async login () &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">          this.resetFormErrors(this.form.login)</span><br><span class="line">          await this.$store.dispatch(&apos;auth/login&apos;, this.form.login.values)</span><br><span class="line">        &#125; catch (e) &#123;</span><br><span class="line">          this.catchFormErrors(this.form.login, e)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>
<p>We should define our <code>layout</code> [2] if it’s not <code>default</code>.<br>There’s some mixins [1] I made for better error catching for forms. Why mixins? Because forms are using a lot in each application, different pages should handle form validation.<br>So I decided to make 2 mixins for reset form errors and passing errors to form.<br><code>client/mixins/resetFormErrors.js</code>:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    resetFormErrors (form) &#123;</span><br><span class="line">      <span class="keyword">if</span> (form &amp;&amp; form.errors) &#123;</span><br><span class="line">        <span class="built_in">Object</span>.keys(form.errors).forEach(<span class="function"><span class="params">k</span> =&gt;</span> &#123;</span><br><span class="line">          form.errors[k] = []</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>client/mixins/catchFormErrors.js</code> (we’re passing our form errors as <code>fields</code> variable inside error in the server side):<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    catchFormErrors (form, err) &#123;</span><br><span class="line">      <span class="keyword">if</span> (form &amp;&amp; form.errors &amp;&amp; err.response &amp;&amp; err.response.data &amp;&amp; err.response.data.error &amp;&amp; err.response.data.error.fields) &#123;</span><br><span class="line">        <span class="keyword">const</span> fields = err.response.data.error.fields</span><br><span class="line">        <span class="built_in">Object</span>.keys(fields).forEach(<span class="function"><span class="params">k</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (form.errors.hasOwnProperty(k) &amp;&amp; <span class="keyword">typeof</span> form.errors[k] === <span class="string">'object'</span>) &#123;</span><br><span class="line">            form.errors[k].push(fields[k])</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>And <code>index.js</code> file to gather mixins:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> catchFormErrors <span class="keyword">from</span> <span class="string">'./catchFormErrors'</span></span><br><span class="line"><span class="keyword">import</span> resetFormErrors <span class="keyword">from</span> <span class="string">'./resetFormErrors'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  catchFormErrors,</span><br><span class="line">  resetFormErrors</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Now we can clean <code>index.vue</code> page:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            Hello &#123;&#123; $store.state.auth.user.name &#125;&#125;!</span><br><span class="line">            &lt;pre&gt;I am the secret content, I am shown only when the user is connected.&lt;/pre&gt;</span><br><span class="line">            &lt;p&gt;&lt;i&gt;You can also refresh this page, you&apos;ll still be connected!&lt;/i&gt;&lt;/p&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi feugiat diam et semper commodo. Praesent et lobortis nisi. Nulla laoreet urna sed sem fringilla, non consectetur dui feugiat. Proin elit eros, sagittis sit amet condimentum id, consectetur id diam. Integer sed nunc vitae nulla rutrum malesuada. Nunc aliquet augue eget mattis aliquam. Praesent eleifend varius orci rutrum auctor. Phasellus neque ipsum, euismod nec massa eget, aliquam porta ex.</span><br><span class="line"></span><br><span class="line">            Vivamus dapibus enim in suscipit porta. Vivamus ac pulvinar nisl. Proin id arcu ut leo pellentesque facilisis at lobortis sapien. In rutrum varius massa, sed egestas enim volutpat in. Nunc pharetra sagittis dui, id bibendum dolor congue et. Nam iaculis, felis in pretium sagittis, massa est lobortis leo, vel tincidunt tellus sem eu arcu. Mauris ultricies suscipit congue. Sed quis lobortis enim. Cras in tellus eu erat auctor vehicula. Nam urna nisi, tristique vel fringilla vitae, fringilla quis ligula. Fusce dictum ipsum ut ornare euismod. Fusce pulvinar justo nec neque laoreet scelerisque.</span><br><span class="line"></span><br><span class="line">            Aenean lorem neque, sollicitudin at ex ut, ullamcorper condimentum diam. Fusce enim quam, ultricies nec magna ut, porttitor commodo nibh. Curabitur vitae suscipit elit. Vestibulum sit amet libero lobortis, accumsan dolor congue, iaculis neque. Nunc sodales sollicitudin augue quis porta. Vestibulum lacus quam, elementum id euismod vitae, sollicitudin at massa. Maecenas eget ultrices tellus. Nullam eu placerat quam.</span><br><span class="line"></span><br><span class="line">            Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Nulla porttitor dui id neque vehicula, ut suscipit metus laoreet. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Ut fermentum enim nec egestas accumsan. Nulla sit amet orci sit amet justo egestas efficitur. Praesent vel libero metus. Mauris quam sapien, condimentum non varius eget, tincidunt et lectus.</span><br><span class="line"></span><br><span class="line">            Nunc porttitor pretium purus ut maximus. Curabitur viverra imperdiet sapien, eget tincidunt ligula tincidunt volutpat. Vivamus faucibus laoreet diam non pellentesque. Cras egestas dui at rutrum maximus. Sed vehicula lectus a lorem convallis, eget varius nulla dignissim. Interdum et malesuada fames ac ante ipsum primis in faucibus. Nam vel sapien non augue finibus scelerisque ut ac nibh. Sed non facilisis quam.</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></p>
<p>NB: there’s no <code>Demo</code> and <code>Posts</code> pages atm. Menu items defined for future purposes and doen’t works.<br>This part wraps up <code>07-visual</code> git branch.</p>
]]></content>
      
        <categories>
            
            <category> full-stack </category>
            
            <category> NEMVN </category>
            
        </categories>
        
        
        <tags>
            
            <tag> nuxt </tag>
            
            <tag> vuetify </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Full Stack (Node + Express + MongoDb + Vue + Nuxt) application. Part 6: Authentication]]></title>
      <url>/2018/02/15/06-nemvn/</url>
      <content type="html"><![CDATA[<p>I highly recommend to use Postman to test your REST api, especially in this part.<br>Let’s get started with authentication with installing <code>passport.js</code> and some requirements:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add passport passport-local</span><br></pre></td></tr></table></figure></p>
<p>Make an <code>auth</code> directory in your <code>engine</code>. Passport has different strategies to authenticate and it could be split in separate files.<br>It should be init after our session, but before router:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">db</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line">  initMiddleware(app)</span><br><span class="line">  initHelmetHeaders(app)</span><br><span class="line">  initSession(app, db)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'./auth'</span>)(app) <span class="comment">// Here</span></span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'@routes'</span>)(app, initNuxt)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> app</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Now we can should handle this in <code>server/engine/auth/index.js</code>:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> logger = <span class="built_in">require</span>(<span class="string">'@engine/logger'</span>)</span><br><span class="line"><span class="keyword">const</span> User = <span class="built_in">require</span>(<span class="string">'@models/user'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> passport = <span class="built_in">require</span>(<span class="string">'passport'</span>)</span><br><span class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">'chalk'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line">  app.use(passport.initialize())</span><br><span class="line">  app.use(passport.session())</span><br><span class="line"></span><br><span class="line">  passport.serializeUser(<span class="function">(<span class="params">user, done</span>) =&gt;</span> &#123;</span><br><span class="line">    done(<span class="literal">null</span>, user.id)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  passport.deserializeUser(<span class="function"><span class="keyword">function</span> (<span class="params">id, done</span>) </span>&#123;</span><br><span class="line">    User.findById(id, &#123;<span class="string">'local.password'</span>: <span class="number">0</span>&#125;)</span><br><span class="line">      .then(<span class="function"><span class="params">user</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// Check that the user is not disabled or deleted</span></span><br><span class="line">        <span class="keyword">if</span> (user.status !== <span class="number">1</span>) <span class="keyword">return</span> done(<span class="literal">null</span>, <span class="literal">false</span>)</span><br><span class="line">        <span class="keyword">return</span> done(<span class="literal">null</span>, user)</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(done)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  logger.info(chalk.bold(<span class="string">'Passport strategies initialization...'</span>))</span><br><span class="line">  <span class="comment">// [1]</span></span><br><span class="line">  <span class="keyword">const</span> strategies = [<span class="string">'local'</span>]</span><br><span class="line">  strategies.forEach(<span class="function"><span class="params">strategy</span> =&gt;</span> &#123;</span><br><span class="line">    logger.info(<span class="string">`Loading <span class="subst">$&#123;strategy&#125;</span> passport strategy`</span>)</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">`./strategies/<span class="subst">$&#123;strategy&#125;</span>`</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Skip default passport initialization, let’s talk about strategies. Currently I’ve made <code>strategies</code> directory and create local strategy (description below) and load it in [1]. Yes, I could read filesystem, or create another index file to export all strategies I have, but there’s no reason to do that. Strategies changes quite seldom and we could handle this by adding it names in the <code>strategies</code> array of file names.<br>Local login strategy is simple:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> c = <span class="built_in">require</span>(<span class="string">'@engine/constants'</span>)</span><br><span class="line"><span class="keyword">const</span> User = <span class="built_in">require</span>(<span class="string">'@models/user'</span>)</span><br><span class="line"><span class="keyword">const</span> &#123;FieldsError&#125; = <span class="built_in">require</span>(<span class="string">'@engine/errors'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> passport = <span class="built_in">require</span>(<span class="string">'passport'</span>)</span><br><span class="line"><span class="keyword">const</span> LocalStrategy = <span class="built_in">require</span>(<span class="string">'passport-local'</span>).Strategy</span><br><span class="line"></span><br><span class="line">passport.use(<span class="string">'local'</span>, <span class="keyword">new</span> LocalStrategy(&#123;</span><br><span class="line">  usernameField: <span class="string">'username'</span>,</span><br><span class="line">  passwordField: <span class="string">'password'</span>,</span><br><span class="line">  passReqToCallback: <span class="literal">true</span></span><br><span class="line">&#125;, <span class="keyword">async</span> (req, username, password, done) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> user = <span class="keyword">await</span> User.findOne(&#123;</span><br><span class="line">      $or: [</span><br><span class="line">        &#123;<span class="attr">name</span>: username&#125;,</span><br><span class="line">        &#123;<span class="string">'local.email'</span>: username&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span> (!user) <span class="keyword">return</span> done(<span class="keyword">new</span> FieldsError(&#123;<span class="attr">username</span>: c.E.NOT_FOUND&#125;))</span><br><span class="line">    <span class="keyword">if</span> (user.status !== <span class="number">1</span>) <span class="keyword">return</span> done(<span class="keyword">new</span> FieldsError(&#123;<span class="attr">username</span>: c.E.DISABLED&#125;))</span><br><span class="line">    <span class="keyword">if</span> (!(<span class="keyword">await</span> user.verifyPassword(password))) <span class="keyword">return</span> done(<span class="keyword">new</span> FieldsError(&#123;<span class="attr">password</span>: c.E.INVALID&#125;))</span><br><span class="line">    <span class="keyword">return</span> done(<span class="literal">null</span>, user)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="keyword">return</span> done(err)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure></p>
<p>Just check user existance, his status and password.<br>You may see new <code>FieldsError</code> class. It’s been made for throwing Validation-like errors.<br>All custom errors will take their place at <code>server/engine/errors</code> directory. Here’s <code>fieldsError.js</code>:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="class"><span class="keyword">class</span> <span class="title">FormError</span> <span class="keyword">extends</span> <span class="title">Error</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> (fields, message, status) &#123;</span><br><span class="line">    <span class="keyword">super</span>(message)</span><br><span class="line">    <span class="keyword">this</span>.status = status || <span class="number">400</span></span><br><span class="line">    <span class="keyword">this</span>.fields = fields</span><br><span class="line">    <span class="built_in">Error</span>.captureStackTrace(<span class="keyword">this</span>, <span class="keyword">this</span>.constructor)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>And <code>index.js</code> placed nearby:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> FieldsError = <span class="built_in">require</span>(<span class="string">'./fieldsError'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  FieldsError</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>We described strategies, so let’s describe routes for auth in <code>server/routes/auth.js</code>:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> c = <span class="built_in">require</span>(<span class="string">'@engine/constants'</span>)</span><br><span class="line"><span class="keyword">const</span> response = <span class="built_in">require</span>(<span class="string">'@engine/response'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> passport = <span class="built_in">require</span>(<span class="string">'passport'</span>)</span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">'express'</span>).Router()</span><br><span class="line"></span><br><span class="line">router.post(<span class="string">'/login'</span>, (req, res, next) =&gt; &#123;</span><br><span class="line">  passport.authenticate(<span class="string">'local'</span>, (err, user, info) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> next(err)</span><br><span class="line">    <span class="keyword">if</span> (!user) <span class="keyword">return</span> response.json(res, <span class="literal">null</span>, response.BAD_REQUEST, c.E.NOT_FOUND)</span><br><span class="line">    req.login(user, err =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">return</span> next(err)</span><br><span class="line">      <span class="keyword">const</span> u = user.toObject()</span><br><span class="line">      <span class="keyword">if</span> (u.local &amp;&amp; u.local.password) <span class="keyword">delete</span> u.local.password</span><br><span class="line">      <span class="keyword">return</span> res.json(u)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)(req, res, next)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.post(<span class="string">'/logout'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  req.logout()</span><br><span class="line">  res.redirect(<span class="string">'/'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router</span><br></pre></td></tr></table></figure></p>
<p>Finally, add it to routes index and don’t forget about our custom errors:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">const</span> EngineErrors = <span class="built_in">require</span>(<span class="string">'@engine/errors'</span>)</span><br><span class="line">...</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">app, ...middlewares</span>) =&gt;</span> &#123;</span><br><span class="line">  app.use(<span class="built_in">require</span>(<span class="string">'./auth'</span>))</span><br><span class="line"></span><br><span class="line">  router.use(<span class="string">'/users'</span>, <span class="built_in">require</span>(<span class="string">'./user'</span>))</span><br><span class="line">  ...</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (err <span class="keyword">instanceof</span> EngineErrors.FieldsError) &#123;</span><br><span class="line">        <span class="keyword">return</span> response.json(res, <span class="literal">null</span>, response.BAD_REQUEST, <span class="literal">null</span>, &#123;<span class="attr">fields</span>: err.fields&#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> response.json(res, <span class="literal">null</span>, response.SERVER_ERROR, err.message)</span><br><span class="line">      &#125;</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure></p>
<p>Also, we can invalidate user update if new password and confirmation doesn’t match (user model):<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;FieldsError&#125; = <span class="built_in">require</span>(<span class="string">'@engine/errors'</span>)</span><br><span class="line">...</span><br><span class="line">userSchema.statics.updateUser = <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> values = _.pick(req.body, _.keys(userSchema.paths))</span><br><span class="line">  <span class="keyword">if</span> (values._id) <span class="keyword">delete</span> values._id</span><br><span class="line">  values = _.pickBy(flatten(values), _.identity)</span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    ((req.body.passNew &amp;&amp; req.body.passNew.length) ||</span><br><span class="line">      (req.body.passNewConfirm &amp;&amp; req.body.passNewConfirm.length)) &amp;&amp;</span><br><span class="line">    req.body.passNew !== req.body.passNewConfirm) &#123;</span><br><span class="line">    <span class="keyword">return</span> next(<span class="keyword">new</span> FieldsError(&#123;<span class="attr">passNew</span>: c.E.NOT_MATCH, <span class="attr">passNewConfirm</span>: c.E.NOT_MATCH&#125;))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.findById(req.params.id)</span><br><span class="line">    .then(<span class="function"><span class="params">user</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (req.body.passNew) &#123;</span><br><span class="line">        <span class="keyword">if</span> (_.isUndefined(values[<span class="string">'local.password'</span>])) &#123;</span><br><span class="line">          <span class="keyword">throw</span> user.invalidate(<span class="string">'local.password'</span>, c.E.REQUIRED)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!user.verifyPasswordSync(values[<span class="string">'local.password'</span>])) &#123;</span><br><span class="line">          <span class="keyword">throw</span> user.invalidate(<span class="string">'local.password'</span>, c.E.NOT_VALID)</span><br><span class="line">        &#125;</span><br><span class="line">        values[<span class="string">'local.password'</span>] = req.body.passNew</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> user.update(values)</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> res.json(<span class="literal">true</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(next)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Finally, let’s make some middleware helpers (<code>server/engine/auth/helpers.js</code>):<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports.isAuthenticated = <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (req.isAuthenticated()) <span class="keyword">return</span> next()</span><br><span class="line">  <span class="keyword">else</span> res.sendStatus(<span class="number">401</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Currently anyone can get users list and information about any user, even delete or modify some fields. Let’s improve this:</p>
<ul>
<li>List of all users - limit for all list requests, retrieve names only;</li>
<li>User details - no changes;</li>
<li>User create - no changes;</li>
<li>User edit - only owner (currently) should have permissions to edit;</li>
<li>User delete - noone (currently) should have permissions to delete user.<br>Let’s make some new routes for this purpose:</li>
<li>post <code>/signup</code> - same as post to <code>/users</code>, create new user;</li>
<li>get <code>/users/me</code> - same as get <code>/users/:id</code>, but id is current user id;</li>
<li>patch <code>/users/me</code> - same as patch <code>/users/:id</code>, but id is current user id;<br>First of all, let’s limit of user list retrieve (<code>server/routes/user.js</code>):<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">router.get(<span class="string">'/'</span>, (req, res, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> limit = req.body.limit || req.query.limit || <span class="number">50</span></span><br><span class="line">  <span class="keyword">let</span> page = req.body.page || req.query.page || <span class="number">1</span></span><br><span class="line">  <span class="keyword">let</span> total</span><br><span class="line">  <span class="keyword">if</span> (page &lt; <span class="number">1</span>) page = <span class="number">1</span></span><br><span class="line">  page--</span><br><span class="line">  User.count()</span><br><span class="line">    .then(<span class="function"><span class="params">c</span> =&gt;</span> &#123;</span><br><span class="line">      total = c</span><br><span class="line">      <span class="keyword">return</span> User.find(&#123;&#125;, &#123;<span class="attr">name</span>: <span class="number">1</span>&#125;).limit(limit).skip(limit * page)</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">users</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> res.json(&#123;</span><br><span class="line">        total: total,</span><br><span class="line">        items: users</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(next)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>To achieve <code>/signup</code> behaviour we have to move our user creation logic from router to model:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">userSchema.statics.createUser = <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> values = _.pick(req.body, _.keys(userSchema.paths))</span><br><span class="line">  <span class="keyword">if</span> (values._id) <span class="keyword">delete</span> values._id</span><br><span class="line">  values = _.pickBy(flatten(values), _.identity)</span><br><span class="line">  <span class="keyword">const</span> newUser = <span class="keyword">new</span> <span class="keyword">this</span>(values)</span><br><span class="line">  <span class="keyword">return</span> newUser.save().then(<span class="function"><span class="params">user</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> response.json(res, _.omit(user.toObject(), <span class="string">'local.password'</span>))</span><br><span class="line">  &#125;).catch(next)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>server/routes/user.js</code> changes:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">router.post(<span class="string">'/'</span>, User.createUser.bind(User))</span><br></pre></td></tr></table></figure></p>
<p><code>server/routes/auth.js</code>:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">router.post(<span class="string">'/signup'</span>, User.createUser.bind(User))</span><br></pre></td></tr></table></figure></p>
<p>To get <code>/users/me</code> we should define handler before <code>/users/:id</code>, otherwise it will try to fetch user with <code>id=&#39;me&#39;</code>:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;isAuthenticated&#125; = <span class="built_in">require</span>(<span class="string">'@engine/auth/helpers'</span>)</span><br><span class="line">...</span><br><span class="line">router.get(<span class="string">'/me'</span>, isAuthenticated, (req, res, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> res.json(req.user.toObject())</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>Patch <code>/users/me</code> looks similar, deleting user now will throw error:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">router.patch(<span class="string">'/me'</span>, isAuthenticated, User.updateUser.bind(User))</span><br><span class="line"></span><br><span class="line">router.patch(<span class="string">'/:id'</span>, isAuthenticated, User.updateUser.bind(User))</span><br><span class="line"></span><br><span class="line">router.delete(<span class="string">'/:id'</span>, (req, res, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> response(res, <span class="literal">null</span>, response.REQUEST_FAILED)</span><br><span class="line">  <span class="comment">// User.findByIdAndRemove(req.params.id)</span></span><br><span class="line">  <span class="comment">//   .then(() =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//     return res.json(true)</span></span><br><span class="line">  <span class="comment">//   &#125;)</span></span><br><span class="line">  <span class="comment">//   .catch(next)</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>And the last thing is modifying <code>updateUser</code> function because we should handle new route:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">userSchema.statics.updateUser = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> values = _.pick(req.body, _.keys(userSchema.paths))</span><br><span class="line">  <span class="keyword">if</span> (values._id) <span class="keyword">delete</span> values._id</span><br><span class="line">  values = _.pickBy(flatten(values), _.identity)</span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    ((req.body.passNew &amp;&amp; req.body.passNew.length) ||</span><br><span class="line">      (req.body.passNewConfirm &amp;&amp; req.body.passNewConfirm.length)) &amp;&amp;</span><br><span class="line">    req.body.passNew !== req.body.passNewConfirm) &#123;</span><br><span class="line">    <span class="keyword">return</span> next(<span class="keyword">new</span> FieldsError(&#123;<span class="attr">passNew</span>: c.E.NOT_MATCH, <span class="attr">passNewConfirm</span>: c.E.NOT_MATCH&#125;))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> user = req.params.id ? <span class="keyword">await</span> <span class="keyword">this</span>.findById(req.params.id) : req.user</span><br><span class="line">    <span class="keyword">if</span> (user._id !== req.user._id) <span class="keyword">return</span> response.json(res, <span class="literal">null</span>, response.FORBIDDEN, c.E.DENIED)</span><br><span class="line">    <span class="keyword">if</span> (req.body.passNew) &#123;</span><br><span class="line">      <span class="keyword">if</span> (_.isUndefined(values[<span class="string">'local.password'</span>])) &#123;</span><br><span class="line">        <span class="keyword">return</span> next(user.invalidate(<span class="string">'local.password'</span>, c.E.REQUIRED))</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (!user.verifyPasswordSync(values[<span class="string">'local.password'</span>])) &#123;</span><br><span class="line">        <span class="keyword">return</span> next(user.invalidate(<span class="string">'local.password'</span>, c.E.NOT_VALID))</span><br><span class="line">      &#125;</span><br><span class="line">      values[<span class="string">'local.password'</span>] = req.body.passNew</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">await</span> user.update(values)</span><br><span class="line">    <span class="keyword">return</span> res.json(<span class="literal">true</span>)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="keyword">return</span> next(err)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Now user can edit only himself.<br>NB: there’s some more constants added into <code>server/engine/constants.js</code>:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'DENIED'</span>: <span class="string">'E_DENIED'</span>,</span><br><span class="line"><span class="string">'DISABLED'</span>: <span class="string">'E_DISABLED'</span>,</span><br><span class="line"><span class="string">'INVALID'</span>: <span class="string">'E_INVALID'</span>,</span><br><span class="line"><span class="string">'NOT_FOUND'</span>: <span class="string">'E_NOT_FOUND'</span>,</span><br></pre></td></tr></table></figure></p>
<p>This part wraps up <code>06-auth</code> git branch.</p>
]]></content>
      
        <categories>
            
            <category> full-stack </category>
            
            <category> NEMVN </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mongo </tag>
            
            <tag> passport </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Full Stack (Node + Express + MongoDb + Vue + Nuxt) application. Part 5: Models and Routes. User]]></title>
      <url>/2018/02/15/05-nemvn/</url>
      <content type="html"><![CDATA[<h2 id="User"><a href="#User" class="headerlink" title="User"></a>User</h2><h3 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h3><p>When you’re talking about user you may find plenty things of properties he could have.<br>Let’s check out main ones:</p>
<ul>
<li><code>name</code> - aka username;</li>
<li><code>email</code> - unique user e-mail used for local login;</li>
<li><code>password</code> - user password’s hash for local login;</li>
<li><code>status</code> - user could be “active”, “not-verified”, “banned”, etc. Best practice is using predefined status codes.<br>Now we’re ready to create our first model.<br>All models will land in <code>server/models</code> directory, don’t forget to create module alias for it:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;@models&quot;: &quot;./server/models&quot;,</span><br><span class="line">&quot;@routes&quot;: &quot;./server/routes&quot;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>To work with model from outside we have to define routes which can handle request and modify documents. That’s why we created module alias for <code>server/routes</code> directory. We’ll be back soon to describe it behaviour.<br>Let’s look at <code>user.js</code> model:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> c = <span class="built_in">require</span>(<span class="string">'@engine/constants'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>)</span><br><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">'crypto'</span>)</span><br><span class="line"><span class="keyword">const</span> bcrypt = <span class="built_in">require</span>(<span class="string">'bcrypt'</span>)</span><br><span class="line"><span class="keyword">const</span> flatten = <span class="built_in">require</span>(<span class="string">'flat'</span>)</span><br><span class="line"><span class="keyword">const</span> _ = <span class="built_in">require</span>(<span class="string">'lodash'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> validateLocalStrategyProperty = <span class="function"><span class="keyword">function</span> (<span class="params">property</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> property &amp;&amp; property.length</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> validateLocalStrategyPassword = <span class="function"><span class="keyword">function</span> (<span class="params">password</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> password &amp;&amp; password.length &gt;= <span class="number">6</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> userSchema = mongoose.Schema(&#123;</span><br><span class="line">  name: &#123;</span><br><span class="line">    type: <span class="built_in">String</span>,</span><br><span class="line">    trim: <span class="literal">true</span>,</span><br><span class="line">    unique: <span class="literal">true</span>,</span><br><span class="line">    index: <span class="literal">true</span>,</span><br><span class="line">    <span class="keyword">default</span>: <span class="string">''</span>,</span><br><span class="line">    validate: [validateLocalStrategyProperty, c.E.REQUIRED]</span><br><span class="line">  &#125;,</span><br><span class="line">  local: &#123;</span><br><span class="line">    email: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      trim: <span class="literal">true</span>,</span><br><span class="line">      index: <span class="literal">true</span>,</span><br><span class="line">      lowerCase: <span class="literal">true</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="string">''</span>,</span><br><span class="line">      unique: <span class="literal">true</span>,</span><br><span class="line">      match: [<span class="regexp">/.+@.+\..+/</span>, c.E.NOT_VALID],</span><br><span class="line">      validate: [validateLocalStrategyProperty, c.E.REQUIRED]</span><br><span class="line">    &#125;,</span><br><span class="line">    password: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="string">''</span>,</span><br><span class="line">      validate: [validateLocalStrategyPassword, [c.E.MIN_LENGTH, <span class="number">6</span>]]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  profile: &#123;</span><br><span class="line">    name: &#123;<span class="attr">type</span>: <span class="built_in">String</span>&#125;,</span><br><span class="line">    gender: &#123;<span class="attr">type</span>: <span class="built_in">String</span>&#125;,</span><br><span class="line">    picture: &#123;<span class="attr">type</span>: <span class="built_in">String</span>&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  status: &#123;</span><br><span class="line">    type: <span class="built_in">Number</span>,</span><br><span class="line">    <span class="keyword">default</span>: <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  timestamps: <span class="literal">true</span>,</span><br><span class="line">  toObject: &#123;</span><br><span class="line">    virtuals: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  toJSON: &#123;</span><br><span class="line">    virtuals: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">protectPassword</span> (<span class="params">next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>.getUpdate === <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.getUpdate()[<span class="string">'local.password'</span>]) &#123;</span><br><span class="line">      <span class="keyword">this</span>.getUpdate()[<span class="string">'local.password'</span>] = <span class="keyword">await</span> bcrypt.hash(<span class="keyword">this</span>.getUpdate()[<span class="string">'local.password'</span>], <span class="number">12</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isModified(<span class="string">'local.password'</span>)) &#123;</span><br><span class="line">      <span class="keyword">this</span>.local.password = <span class="keyword">await</span> bcrypt.hash(<span class="keyword">this</span>.local.password, <span class="number">12</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> next()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">userSchema.pre(<span class="string">'save'</span>, protectPassword)</span><br><span class="line"></span><br><span class="line">userSchema.pre(<span class="string">'update'</span>, protectPassword)</span><br><span class="line"></span><br><span class="line">userSchema.methods.verifyPassword = <span class="function"><span class="keyword">function</span> (<span class="params">password</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> bcrypt.compare(password, <span class="keyword">this</span>.local.password)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">userSchema.methods.verifyPasswordSync = <span class="function"><span class="keyword">function</span> (<span class="params">password</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> bcrypt.compareSync(password, <span class="keyword">this</span>.local.password)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">userSchema.virtual(<span class="string">'avatar'</span>).get(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.profile &amp;&amp; <span class="keyword">this</span>.profile.picture) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.profile.picture</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> getRandomUserAvatarId = <span class="function"><span class="params">str</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> c = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">      c += str.charCodeAt(i)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c % <span class="number">100</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> email = <span class="keyword">this</span>.local.email</span><br><span class="line">  <span class="keyword">if</span> (!email) &#123;</span><br><span class="line">    <span class="keyword">const</span> g = <span class="keyword">this</span>.profile &amp;&amp; <span class="keyword">this</span>.profile.gender === <span class="string">'female'</span> ? <span class="string">'women'</span> : <span class="string">'men'</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">`https://randomuser.me/api/portraits/thumb/<span class="subst">$&#123;g&#125;</span>/<span class="subst">$&#123;getRandomUserAvatarId(<span class="keyword">this</span>.local.name)&#125;</span>.jpg`</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> hash = crypto.createHash(<span class="string">'md5'</span>).update(email).digest(<span class="string">'hex'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`https://gravatar.com/avatar/<span class="subst">$&#123;hash&#125;</span>?s=64&amp;d=wavatar`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">userSchema.statics.updateUser = <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> values = _.pick(req.body, _.keys(userSchema.paths))</span><br><span class="line">  <span class="keyword">if</span> (values._id) <span class="keyword">delete</span> values._id</span><br><span class="line">  values = _.pickBy(flatten(values), _.identity)</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.findById(req.params.id)</span><br><span class="line">    .then(<span class="function"><span class="params">user</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        ((req.body.passNew &amp;&amp; req.body.passNew.length) ||</span><br><span class="line">          (req.body.passNewConfirm &amp;&amp; req.body.passNewConfirm.length)) &amp;&amp;</span><br><span class="line">        req.body.passNew !== req.body.passNewConfirm) &#123;</span><br><span class="line">        user.invalidate(<span class="string">'passNew'</span>, c.E.NOT_MATCH)</span><br><span class="line">        <span class="keyword">throw</span> user.invalidate(<span class="string">'passNewConfirm'</span>, c.E.NOT_MATCH)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (req.body.passNew) &#123;</span><br><span class="line">        <span class="keyword">if</span> (_.isUndefined(values[<span class="string">'local.password'</span>])) &#123;</span><br><span class="line">          <span class="keyword">throw</span> user.invalidate(<span class="string">'local.password'</span>, c.E.REQUIRED)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!user.verifyPasswordSync(values[<span class="string">'local.password'</span>])) &#123;</span><br><span class="line">          <span class="keyword">throw</span> user.invalidate(<span class="string">'local.password'</span>, c.E.NOT_VALID)</span><br><span class="line">        &#125;</span><br><span class="line">        values[<span class="string">'local.password'</span>] = req.body.passNew</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> user.update(values)</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> res.json(<span class="literal">true</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(next)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = mongoose.model(<span class="string">'User'</span>, userSchema)</span><br></pre></td></tr></table></figure></p>
<p>Also, we need <code>bcrypt</code> package for password hashing and <code>flat</code> for flattern objects, so let’s add it:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add bcrypt flat</span><br></pre></td></tr></table></figure></p>
<p>There’s some nifty functions for make sure password doesn’t store in database, hash only. And little bit functions for profile and avatars.<br>Timestamps are turned on and virtuals are included in toJSON and toObject conversion.<br>We’re return error codes instead of messages.<br>Pros:</p>
<ul>
<li>No need to know user locale;</li>
<li>No need to repeat error message in different places.<br>Cons:</li>
<li>Error message should be passed as array because of an additional information like numbers (min, max), templates, etc.<br>Let’s create <code>constants.js</code> in the <code>server/engine</code> directory:<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="string">'E'</span>: &#123;</span><br><span class="line">    <span class="string">'REQUIRED'</span>: <span class="string">'E_REQUIRED'</span>,</span><br><span class="line">    <span class="string">'UNIQUE'</span>: <span class="string">'E_UNIQUE'</span>,</span><br><span class="line">    <span class="string">'NOT_VALID'</span>: <span class="string">'E_NOT_VALID'</span>,</span><br><span class="line">    <span class="string">'NOT_MATCH'</span>: <span class="string">'E_NOT_MATCH'</span>,</span><br><span class="line">    <span class="string">'MIN_LENGTH'</span>: <span class="string">'E_MIN_LENGTH'</span>,</span><br><span class="line">    <span class="string">'MAX_LENGTH'</span>: <span class="string">'E_MAX_LENGTH'</span>,</span><br><span class="line">    <span class="string">'NOT_IN_RANGE'</span>: <span class="string">'E_NOT_IN_RANGE'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>Transforming password into hash should be called each time user saved or updated.<br>Also, we have to be sure that only filled keys should be picked on user update. To set nested objects like <code>local.password</code> we have to make object flat. If we don’t - <code>local</code> key will be completely replaced with a new one.<br>The last thing is to check password if we want to set new one.</p>
<h3 id="Route"><a href="#Route" class="headerlink" title="Route"></a>Route</h3><p>Before handling routes let’s make one more thing: custom response behaviour.<br>Why do we need that?</p>
<ul>
<li>Send errors in response in easy way;</li>
<li>Custom error messages, extra error data, predefined status codes, etc.<br><code>server/engine/response.js</code>:<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _ = <span class="built_in">require</span>(<span class="string">'lodash'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"></span><br><span class="line">  BAD_REQUEST: &#123;</span><br><span class="line">    status: <span class="number">400</span>,</span><br><span class="line">    type: <span class="string">'BAD_REQUEST'</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  UNAUTHORIZED: &#123;</span><br><span class="line">    status: <span class="number">401</span>,</span><br><span class="line">    type: <span class="string">'UNAUTHORIZED'</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  REQUEST_FAILED: &#123;</span><br><span class="line">    status: <span class="number">402</span>,</span><br><span class="line">    type: <span class="string">'REQUEST_FAILED'</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  FORBIDDEN: &#123;</span><br><span class="line">    status: <span class="number">403</span>,</span><br><span class="line">    type: <span class="string">'FORBIDDEN'</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  NOT_FOUND: &#123;</span><br><span class="line">    status: <span class="number">404</span>,</span><br><span class="line">    type: <span class="string">'NOT_FOUND'</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  TOO_MANY_REQUEST: &#123;</span><br><span class="line">    status: <span class="number">429</span>,</span><br><span class="line">    type: <span class="string">'TOO_MANY_REQUEST'</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  SERVER_ERROR: &#123;</span><br><span class="line">    status: <span class="number">500</span>,</span><br><span class="line">    type: <span class="string">'SERVER_ERROR'</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  NOT_IMPLEMENTED: &#123;</span><br><span class="line">    status: <span class="number">501</span>,</span><br><span class="line">    type: <span class="string">'NOT_IMPLEMENTED'</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Generate a JSON REST API response</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * If data present and no error, we will send status 200 with JSON data</span></span><br><span class="line"><span class="comment">   * If no data but has error, we will send HTTP error code and message</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * @param  &#123;Object&#125; res          ExpressJS res object</span></span><br><span class="line"><span class="comment">   * @param  &#123;Object&#125; data         Response data</span></span><br><span class="line"><span class="comment">   * @param  &#123;Object&#125; err          Error object</span></span><br><span class="line"><span class="comment">   * @param  &#123;String&#125; errMessage   Custom error message</span></span><br><span class="line"><span class="comment">   * @param  &#123;Object&#125; extraParams  Extra error params</span></span><br><span class="line"><span class="comment">   * @return &#123;*&#125; If res assigned, return with res, otherwise return the response JSON object</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  json (res, data, err, errMessage, extraParams) &#123;</span><br><span class="line">    <span class="keyword">const</span> response = &#123;&#125;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      response.error = err</span><br><span class="line">      response.status = err.status || <span class="number">500</span></span><br><span class="line">      <span class="keyword">if</span> (errMessage) &#123;</span><br><span class="line">        response.error.message = errMessage.message || errMessage</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (extraParams &amp;&amp; _.isObject(extraParams)) response.error = _.assign(response.error, extraParams)</span><br><span class="line">      response.data = data</span><br><span class="line">      <span class="keyword">if</span> (res) res.status(response.status)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      response.status = <span class="number">200</span></span><br><span class="line">      response.data = data</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res ? res.json(response) : response</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>Now we ready to make our routing system. Let’s make <code>index.js</code> and <code>user.js</code> files in <code>server/routes</code> directory. <code>index</code> file will gather all routes. <code>user</code> and other ones have to return <code>express-router</code> instance for smooth implementation.<br>Let’s take a look in <code>user.js</code>:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> response = <span class="built_in">require</span>(<span class="string">'@engine/response'</span>)</span><br><span class="line"><span class="keyword">const</span> User = <span class="built_in">require</span>(<span class="string">'@models/user'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> _ = <span class="built_in">require</span>(<span class="string">'lodash'</span>)</span><br><span class="line"><span class="keyword">const</span> flatten = <span class="built_in">require</span>(<span class="string">'flat'</span>)</span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">'express'</span>).Router()</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/'</span>, (req, res, next) =&gt; &#123;</span><br><span class="line">  User.find(&#123;&#125;, &#123;<span class="string">'local.password'</span>: <span class="number">0</span>&#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">users</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> res.json(users)</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(next)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/:id'</span>, (req, res, next) =&gt; &#123;</span><br><span class="line">  User.findById(req.params.id, &#123;<span class="string">'local.password'</span>: <span class="number">0</span>&#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">user</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> res.json(user)</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(next)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.post(<span class="string">'/'</span>, (req, res, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> values = _.pick(req.body, _.keys(User.schema.paths))</span><br><span class="line">  <span class="keyword">if</span> (values._id) <span class="keyword">delete</span> values._id</span><br><span class="line">  values = _.pickBy(flatten(values), _.identity)</span><br><span class="line">  <span class="keyword">const</span> newUser = <span class="keyword">new</span> User(values)</span><br><span class="line">  <span class="keyword">return</span> newUser.save().then(<span class="function"><span class="params">user</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> response.json(res, _.omit(user.toObject(), <span class="string">'local.password'</span>))</span><br><span class="line">  &#125;).catch(next)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.patch(<span class="string">'/:id'</span>, User.updateUser.bind(User))</span><br><span class="line"></span><br><span class="line">router.delete(<span class="string">'/:id'</span>, (req, res, next) =&gt; &#123;</span><br><span class="line">  User.findByIdAndRemove(req.params.id)</span><br><span class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> res.json(<span class="literal">true</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(next)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router</span><br></pre></td></tr></table></figure></p>
<p>Just a REST api, nothing else.<br>Now <code>index.js</code>:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> c = <span class="built_in">require</span>(<span class="string">'@engine/constants'</span>)</span><br><span class="line"><span class="keyword">const</span> logger = <span class="built_in">require</span>(<span class="string">'@engine/logger'</span>)</span><br><span class="line"><span class="keyword">const</span> response = <span class="built_in">require</span>(<span class="string">'@engine/response'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>)</span><br><span class="line"><span class="keyword">const</span> _ = <span class="built_in">require</span>(<span class="string">'lodash'</span>)</span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">'express'</span>).Router()</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">app, ...middlewares</span>) =&gt;</span> &#123;</span><br><span class="line">  router.use(<span class="string">'/users'</span>, <span class="built_in">require</span>(<span class="string">'./user'</span>))</span><br><span class="line">  app.use(<span class="string">'/api'</span>, router)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// [1]</span></span><br><span class="line">  middlewares.forEach(<span class="function"><span class="params">middleware</span> =&gt;</span> middleware(app))</span><br><span class="line"></span><br><span class="line">  app.use(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!err) <span class="keyword">return</span> next()</span><br><span class="line"></span><br><span class="line">    logger.error(err.stack)</span><br><span class="line">    <span class="comment">// [2]</span></span><br><span class="line">    <span class="keyword">if</span> (err <span class="keyword">instanceof</span> mongoose.Error.ValidationError) &#123;</span><br><span class="line">      <span class="keyword">const</span> fields = &#123;&#125;</span><br><span class="line">      _.each(err.errors, e =&gt; &#123;</span><br><span class="line">        fields[e.path] = _.isArray(e.properties) ? e.properties : e.message</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">return</span> response.json(res, <span class="literal">null</span>, response.BAD_REQUEST, <span class="literal">null</span>, &#123;fields&#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (err.name &amp;&amp; err.name === <span class="string">'BulkWriteError'</span>) &#123;</span><br><span class="line">      <span class="keyword">switch</span> (err.code) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">11000</span>:</span><br><span class="line">          <span class="keyword">let</span> field = err.message.split(<span class="string">'.$'</span>)[<span class="number">1</span>]</span><br><span class="line">          field = field.split(<span class="string">' dup key'</span>)[<span class="number">0</span>]</span><br><span class="line">          field = field.substring(<span class="number">0</span>, field.lastIndexOf(<span class="string">'_'</span>))</span><br><span class="line">          <span class="keyword">return</span> response.json(res, <span class="literal">null</span>, response.BAD_REQUEST, <span class="literal">null</span>, &#123;<span class="attr">fields</span>: &#123;[field]: c.E.UNIQUE&#125;&#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> response.json(res, <span class="literal">null</span>, response.SERVER_ERROR, err.message)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  app.use(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> response.json(res, <span class="literal">null</span>, response.NOT_FOUND)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>There’s some unclear code. The function accepts <code>app</code> argument and <code>...middlewares</code>. The last one contains middlewares which should be init after routes defined, but before error hadling. In our case it’s Nuxt. We can’t define it before routes, because we won’t reach them (Nuxt middleware won’t call <code>next</code> function) and we can’t define it after error handling, because 404 error will be returned before Nuxt.<br>In <code>server/engine/express.js</code> we should call routes initialization:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">db</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line">  initMiddleware(app)</span><br><span class="line">  initHelmetHeaders(app)</span><br><span class="line">  initSession(app, db)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'@routes'</span>)(app, initNuxt)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> app</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>We’re also have custom check for ValidationError to retrieve fields which was invalid with error messages (or arrays with message and arguments) and BulkWriteError for <code>unique</code> validation (it’s a bit different than Validation one).<br>This part wraps up <code>05-user</code> git branch.</p>
]]></content>
      
        <categories>
            
            <category> full-stack </category>
            
            <category> NEMVN </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mongo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Full Stack (Node + Express + MongoDb + Vue + Nuxt) application. Part 4: MongoDb]]></title>
      <url>/2018/02/13/04-nemvn/</url>
      <content type="html"><![CDATA[<h2 id="Connection"><a href="#Connection" class="headerlink" title="Connection"></a>Connection</h2><p>We’re going to use <code>mongoose</code> to communicate with our MongoDb instance. Make sure MongoDb running and configured.<br>For storing sessions in the database we also need <code>connect-mongo</code> package.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add mongoose connect-mongo</span><br></pre></td></tr></table></figure></p>
<p>Configs for mongo connection looks like this:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">db: &#123;</span><br><span class="line">  uri: <span class="string">'mongodb://localhost/nemvn?authSource=admin'</span>,</span><br><span class="line">  options: &#123;</span><br><span class="line">    user: <span class="string">'admin'</span>,</span><br><span class="line">    pass: <span class="string">'admin'</span>,</span><br><span class="line">    socketTimeoutMS: <span class="number">0</span>,</span><br><span class="line">    keepAlive: <span class="literal">true</span>,</span><br><span class="line">    reconnectTries: <span class="number">30</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Make sure you’re set correct <code>user</code> and <code>pass</code> for your mongo instance. If there’s no auth - just remove this options from list.</p>
<h2 id="Initialization"><a href="#Initialization" class="headerlink" title="Initialization"></a>Initialization</h2><p>MongoDb initialization will be described in <code>server/engine/mongo.js</code>:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'@config'</span>)</span><br><span class="line"><span class="keyword">const</span> logger = <span class="built_in">require</span>(<span class="string">'@engine/logger'</span>)</span><br><span class="line"><span class="keyword">const</span> &#123;env&#125; = <span class="built_in">require</span>(<span class="string">'@helpers'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">'chalk'</span>)</span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  mongoose.Promise = global.Promise</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (mongoose.connection.readyState !== <span class="number">1</span>) &#123;</span><br><span class="line">    logger.info(<span class="string">`Connecting to Mongo <span class="subst">$&#123;config.db.uri&#125;</span> ...`</span>)</span><br><span class="line">    mongoose.connection.on(<span class="string">'error'</span>, err =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err.message.code === <span class="string">'ETIMEDOUT'</span>) &#123;</span><br><span class="line">        logger.warn(<span class="string">'Mongo connection timeout!'</span>, err)</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          mongoose.connect(config.db.uri, config.db.options)</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      logger.error(<span class="string">'Could not connect to MongoDB!'</span>)</span><br><span class="line">      <span class="keyword">return</span> logger.error(err)</span><br><span class="line">    &#125;)</span><br><span class="line">    mongoose.connection.once(<span class="string">'open'</span>, () =&gt; &#123;</span><br><span class="line">      logger.info(chalk.yellow.bold(<span class="string">'Mongo DB connected.'</span>))</span><br><span class="line">      logger.info()</span><br><span class="line">    &#125;)</span><br><span class="line">    mongoose.connect(config.db.uri, config.db.options)</span><br><span class="line">      .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        mongoose.set(<span class="string">'debug'</span>, env.isDev())</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        logger.error(<span class="string">'Could not connect to MongoDB!'</span>)</span><br><span class="line">        <span class="keyword">return</span> logger.error(err)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    logger.info(<span class="string">'Mongo already connected.'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> mongoose.connection</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Connection process is simple. There’s some extra handlers for logging.<br>We should init MongoDb before express:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> db = <span class="built_in">require</span>(<span class="string">'@engine/mongo'</span>)()</span><br><span class="line"><span class="keyword">const</span> app = <span class="built_in">require</span>(<span class="string">'@engine/express'</span>)(db)</span><br></pre></td></tr></table></figure></p>
<h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><p>Now we can use this MongoDb instance as session storage.<br>As you can see above, we passed <code>db</code> constant into express init function, let’s handle this:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MongoStore = <span class="built_in">require</span>(<span class="string">'connect-mongo'</span>)(session)</span><br><span class="line">...</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Initialize session</span></span><br><span class="line"><span class="comment"> * @param &#123;any&#125; app</span></span><br><span class="line"><span class="comment"> * @param &#123;db&#125; db</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initSession</span> (<span class="params">app, db</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> configSession = config.session</span><br><span class="line">  configSession.store = <span class="keyword">new</span> MongoStore(&#123;</span><br><span class="line">    mongooseConnection: db,</span><br><span class="line">    autoReconnect: <span class="literal">true</span></span><br><span class="line">  &#125;)</span><br><span class="line">  app.use(session(configSession))</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">db</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line">  initMiddleware(app)</span><br><span class="line">  initHelmetHeaders(app)</span><br><span class="line">  initSession(app, db)</span><br><span class="line">  initNuxt(app)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> app</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Now all sessions will be saved in the database.<br>NB: we’re saving just initialized sessions of authorized users. There’s no users atm, so you could set <code>saveUninitialized</code> to <code>true</code> in your config to look how it works.</p>
<h2 id="Close-connection"><a href="#Close-connection" class="headerlink" title="Close connection"></a>Close connection</h2><p>The final thing is about connection closing when server have to stop. Let’s modify helper <code>safeStop.js</code>:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> logger = <span class="built_in">require</span>(<span class="string">'@engine/logger'</span>)</span><br><span class="line"><span class="keyword">const</span> env = <span class="built_in">require</span>(<span class="string">'./env'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">'chalk'</span>)</span><br><span class="line"><span class="keyword">const</span> moment = <span class="built_in">require</span>(<span class="string">'moment'</span>)</span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> smoothExit = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> exit = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    logger.info()</span><br><span class="line">    logger.info(chalk.bold(<span class="string">'------[ Server stopped at %s Uptime: %s ]------'</span>), moment().format(<span class="string">'YYYY-MM-DD HH:mm:ss.SSS'</span>), moment.duration(process.uptime() * <span class="number">1000</span>).humanize())</span><br><span class="line">    <span class="keyword">return</span> process.exit(<span class="number">0</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (mongoose.connection.readyState === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> exit()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (env.isTest()) <span class="keyword">await</span> mongoose.connection.dropDatabase()</span><br><span class="line">    <span class="keyword">await</span> mongoose.connection.close()</span><br><span class="line">    <span class="keyword">return</span> exit()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">process.on(<span class="string">'SIGINT'</span>, smoothExit).on(<span class="string">'SIGTERM'</span>, smoothExit)</span><br></pre></td></tr></table></figure></p>
<p>This part wraps up <code>04-mongo</code> git branch.</p>
]]></content>
      
        <categories>
            
            <category> full-stack </category>
            
            <category> NEMVN </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mongo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Full Stack (Node + Express + MongoDb + Vue + Nuxt) application. Part 3: Logging, initialization splitting and more helpers]]></title>
      <url>/2018/02/13/03-nemvn/</url>
      <content type="html"><![CDATA[<h2 id="Logging"><a href="#Logging" class="headerlink" title="Logging"></a>Logging</h2><p>Console logging is good, but it doesn’t cover all needs. Server could turn off instantly and you won’t see any messages, or there’s plenty errors and you have no time to read a single one, etc.<br>Let’s take a look for other logging variations.<br>There’s already good module to achieve different behaviours:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add winston</span><br></pre></td></tr></table></figure></p>
<p>Files, belong using for init our application and other nifty functions which require config will land into <code>server/engine</code> directory. Make sure to include it into your module aliases list:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;@engine&quot;: &quot;./server/engine&quot;</span><br></pre></td></tr></table></figure></p>
<p>Lets make a new file <code>logger.js</code> with console output:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> winston = <span class="built_in">require</span>(<span class="string">'winston'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'@config'</span>)</span><br><span class="line"><span class="keyword">const</span> &#123;env&#125; = <span class="built_in">require</span>(<span class="string">'@helpers'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> transports = []</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Console transporter</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">transports.push(<span class="keyword">new</span> winston.transports.Console(&#123;</span><br><span class="line">  level: config.logging.console.level,</span><br><span class="line">  colorize: <span class="literal">true</span>,</span><br><span class="line">  prettyPrint: <span class="literal">true</span>,</span><br><span class="line">  handleExceptions: env.isProduction()</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">// [before]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> logger = <span class="keyword">new</span> winston.Logger(&#123;</span><br><span class="line">  level: <span class="string">'debug'</span>,</span><br><span class="line">  transports: transports,</span><br><span class="line">  exitOnError: <span class="literal">false</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// [after]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = logger</span><br></pre></td></tr></table></figure></p>
<p>As you can see we’re using <code>config.logging.console.level</code> variable to define level of console logging. Let’s extend our <code>config.template.js</code> for logging:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">logging: &#123;</span><br><span class="line">  <span class="built_in">console</span>: &#123;</span><br><span class="line">    level: <span class="string">'debug'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>We could redefine this level for some environments. For production we could use this:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">logging: &#123;</span><br><span class="line">  <span class="built_in">console</span>: &#123;</span><br><span class="line">    level: <span class="string">'error'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Further loggers require some additional packages to install, some config and init function which should be placed [before] or [after] logger init.</p>
<h3 id="File-before"><a href="#File-before" class="headerlink" title="File [before]"></a>File [before]</h3><p>packages:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add mkdirp winston-daily-rotate-file</span><br></pre></td></tr></table></figure></p>
<p>config:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">file: &#123;</span><br><span class="line">  enabled: <span class="literal">true</span>,</span><br><span class="line">  path: path.normalize(path.join(__dirname, <span class="string">'..'</span>, <span class="string">'..'</span>, <span class="string">'logs'</span>)),</span><br><span class="line">  level: <span class="string">'info'</span>,</span><br><span class="line">  json: <span class="literal">false</span>,</span><br><span class="line">  exceptionFile: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>NB: you should add <code>const path = require(&#39;path&#39;)</code> at the begin of your config files if you use <code>path</code>.<br>init:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> mkdirp = <span class="built_in">require</span>(<span class="string">'mkdirp'</span>)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * File transporter</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (config.logging.file.enabled) &#123;</span><br><span class="line">  <span class="comment">// Create logs directory</span></span><br><span class="line">  <span class="keyword">const</span> logDir = config.logging.file.path</span><br><span class="line">  <span class="keyword">if</span> (!fs.existsSync(logDir)) &#123;</span><br><span class="line">    mkdirp(logDir)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  transports.push(<span class="keyword">new</span> (<span class="built_in">require</span>(<span class="string">'winston-daily-rotate-file'</span>))(&#123;</span><br><span class="line">    filename: path.join(logDir, <span class="string">'server.log'</span>),</span><br><span class="line">    level: config.logging.file.level || <span class="string">'info'</span>,</span><br><span class="line">    timestamp: <span class="literal">true</span>,</span><br><span class="line">    json: config.logging.file.json || <span class="literal">false</span>,</span><br><span class="line">    handleExceptions: <span class="literal">true</span></span><br><span class="line">  &#125;))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (config.logging.file.exceptionFile) &#123;</span><br><span class="line">    transports.push(<span class="keyword">new</span> winston.transports.File(&#123;</span><br><span class="line">      filename: path.join(logDir, <span class="string">'exceptions.log'</span>),</span><br><span class="line">      level: <span class="string">'error'</span>,</span><br><span class="line">      timestamp: <span class="literal">true</span>,</span><br><span class="line">      json: config.logging.file.json || <span class="literal">false</span>,</span><br><span class="line">      prettyPrint: <span class="literal">true</span>,</span><br><span class="line">      handleExceptions: <span class="literal">true</span>,</span><br><span class="line">      humanReadableUnhandledException: <span class="literal">true</span></span><br><span class="line">    &#125;))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="Logentries-before"><a href="#Logentries-before" class="headerlink" title="Logentries [before]"></a><a href="https://logentries.com/" target="_blank" rel="noopener">Logentries</a> [before]</h3><p>packages:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add le_node</span><br></pre></td></tr></table></figure></p>
<p>config:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">logentries: &#123;</span><br><span class="line">  enabled: <span class="literal">false</span>,</span><br><span class="line">  token: <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>init:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Logentries transporter</span></span><br><span class="line"><span class="comment"> * https://logentries.com/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (config.logging.logentries.enabled &amp;&amp; config.logging.logentries.token) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Logentries log transport enabled!'</span>)</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'le_node'</span>)</span><br><span class="line">  transports.push(<span class="keyword">new</span> winston.transports.Logentries(&#123;</span><br><span class="line">    level: <span class="string">'debug'</span>,</span><br><span class="line">    token: config.logging.logentries.token</span><br><span class="line">  &#125;))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="Papertrail-before"><a href="#Papertrail-before" class="headerlink" title="Papertrail [before]"></a><a href="https://papertrailapp.com/" target="_blank" rel="noopener">Papertrail</a> [before]</h3><p>packages:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add winston-papertrail</span><br></pre></td></tr></table></figure></p>
<p>config:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">papertrail: &#123;</span><br><span class="line">  enabled: <span class="literal">false</span>,</span><br><span class="line">  host: <span class="literal">null</span>,</span><br><span class="line">  port: <span class="literal">null</span>,</span><br><span class="line">  level: <span class="string">'debug'</span>,</span><br><span class="line">  program: <span class="string">'vem'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>init:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Papertrail transporter</span></span><br><span class="line"><span class="comment"> * https://papertrailapp.com/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (config.logging.papertrail.enabled) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Papertrail log transport enabled!'</span>)</span><br><span class="line">  <span class="comment">// eslint-disable-next-line no-unused-expressions</span></span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'winston-papertrail'</span>).Papertrail</span><br><span class="line">  transports.push(<span class="keyword">new</span> winston.transports.Papertrail(config.logging.papertrail))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="Loggly-after"><a href="#Loggly-after" class="headerlink" title="Loggly [after]"></a><a href="https://www.loggly.com/" target="_blank" rel="noopener">Loggly</a> [after]</h3><p>packages:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add winston-loggly-bulk</span><br></pre></td></tr></table></figure></p>
<p>config:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">loggly: &#123;</span><br><span class="line">  enabled: <span class="literal">false</span>,</span><br><span class="line">  token: <span class="literal">null</span>,</span><br><span class="line">  subdomain: <span class="literal">null</span>,</span><br><span class="line">  tags: [],</span><br><span class="line">  json: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>init:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Loggly transporter</span></span><br><span class="line"><span class="comment"> * https://www.loggly.com/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (config.logging.loggly.enabled &amp;&amp; config.logging.loggly.token) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Loggly log transport enabled!'</span>)</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'winston-loggly-bulk'</span>)</span><br><span class="line">  logger.add(winston.transports.Loggly, &#123;</span><br><span class="line">    inputToken: config.logging.loggly.token,</span><br><span class="line">    subdomain: config.logging.loggly.subdomain,</span><br><span class="line">    tags: config.logging.loggly.tags,</span><br><span class="line">    json: config.logging.loggly.json</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="Logsene-after"><a href="#Logsene-after" class="headerlink" title="Logsene [after]"></a><a href="https://sematext.com/logsene/" target="_blank" rel="noopener">Logsene</a> [after]</h3><p>packages:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add winston-logsene</span><br></pre></td></tr></table></figure></p>
<p>config:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">logsene: &#123;</span><br><span class="line">  enabled: <span class="literal">false</span>,</span><br><span class="line">  token: <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>init:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Logsene transporter</span></span><br><span class="line"><span class="comment"> * https://sematext.com/logsene/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (config.logging.logsene.enabled &amp;&amp; config.logging.logsene.token) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Logsene log transport enabled!'</span>)</span><br><span class="line">  <span class="keyword">const</span> logsene = <span class="built_in">require</span>(<span class="string">'winston-logsene'</span>)</span><br><span class="line">  logger.add(logsene, &#123;</span><br><span class="line">    type: <span class="string">'vem-server'</span>,</span><br><span class="line">    token: config.logging.logsene.token</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="Logz-io-after"><a href="#Logz-io-after" class="headerlink" title="Logz.io [after]"></a><a href="https://logz.io/" target="_blank" rel="noopener">Logz.io</a> [after]</h3><p>packages:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add winston-logzio</span><br></pre></td></tr></table></figure></p>
<p>config:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">logzio: &#123;</span><br><span class="line">  enabled: <span class="literal">false</span>,</span><br><span class="line">  token: <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>init:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Logz.io transporter</span></span><br><span class="line"><span class="comment"> * https://logz.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (config.logging.logzio.enabled &amp;&amp; config.logging.logzio.token) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Logz.io log transport enabled!'</span>)</span><br><span class="line">  <span class="keyword">const</span> logzio = <span class="built_in">require</span>(<span class="string">'winston-logzio'</span>)</span><br><span class="line">  logger.add(logzio, &#123;</span><br><span class="line">    token: config.logging.logzio.token</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="Graylog-after"><a href="#Graylog-after" class="headerlink" title="Graylog [after]"></a><a href="https://www.graylog.org/" target="_blank" rel="noopener">Graylog</a> [after]</h3><p>packages:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add winston-graylog2</span><br></pre></td></tr></table></figure></p>
<p>config:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graylog: &#123;</span><br><span class="line">  enabled: <span class="literal">false</span>,</span><br><span class="line">  servers: [&#123;<span class="attr">host</span>: <span class="string">'192.168.1.100'</span>, <span class="attr">port</span>: <span class="number">12201</span>&#125;],</span><br><span class="line">  facility: <span class="string">'MEVN'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>init:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Graylog transporter</span></span><br><span class="line"><span class="comment"> * https://www.graylog.org/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (config.logging.graylog.enabled) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Graylog log transport enabled! Servers: '</span> + <span class="built_in">JSON</span>.stringify(config.logging.graylog.servers))</span><br><span class="line">  <span class="keyword">let</span> graylog = <span class="built_in">require</span>(<span class="string">'winston-graylog2'</span>)</span><br><span class="line">  logger.add(graylog, &#123;</span><br><span class="line">    name: <span class="string">'Graylog'</span>,</span><br><span class="line">    level: <span class="string">'debug'</span>,</span><br><span class="line">    graylog: &#123;</span><br><span class="line">      servers: config.logging.graylog.servers,</span><br><span class="line">      facility: config.logging.graylog.facility</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Entry-point"><a href="#Entry-point" class="headerlink" title="Entry point"></a>Entry point</h2><p>Our <code>server/index.js</code> intended for complete server init and have a lot of stuff to init to. Now there’s just express, sessions and nuxt init, but this file will grow. Best practice is split this file.<br>We already have an <code>engine</code> directory, so let’s move our express initialization into <code>express.js</code> file located in the <code>engine</code> directory:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'@config'</span>)</span><br><span class="line"><span class="keyword">const</span> &#123;env&#125; = <span class="built_in">require</span>(<span class="string">'@helpers'</span>)</span><br><span class="line"><span class="keyword">const</span> nuxtConfig = <span class="built_in">require</span>(<span class="string">'@/nuxt.config'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">'express-session'</span>)</span><br><span class="line"><span class="keyword">const</span> cookieParser = <span class="built_in">require</span>(<span class="string">'cookie-parser'</span>)</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>)</span><br><span class="line"><span class="keyword">const</span> &#123;Nuxt, Builder&#125; = <span class="built_in">require</span>(<span class="string">'nuxt'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Initialize middlewares</span></span><br><span class="line"><span class="comment"> * @param &#123;any&#125; app</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initMiddleware</span> (<span class="params">app</span>) </span>&#123;</span><br><span class="line">  app.use(bodyParser.urlencoded(&#123;</span><br><span class="line">    extended: <span class="literal">true</span></span><br><span class="line">  &#125;))</span><br><span class="line">  app.use(bodyParser.json())</span><br><span class="line">  app.use(cookieParser())</span><br><span class="line">  app.set(<span class="string">'etag'</span>, <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Initialize session</span></span><br><span class="line"><span class="comment"> * @param &#123;any&#125; app</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initSession</span> (<span class="params">app</span>) </span>&#123;</span><br><span class="line">  app.use(session(config.session))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Initialize Nuxt</span></span><br><span class="line"><span class="comment"> * @param &#123;any&#125; app</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initNuxt</span> (<span class="params">app</span>) </span>&#123;</span><br><span class="line">  nuxtConfig.dev = !env.isProduction()</span><br><span class="line">  <span class="keyword">const</span> nuxt = <span class="keyword">new</span> Nuxt(nuxtConfig)</span><br><span class="line">  <span class="keyword">if</span> (nuxtConfig.dev) &#123;</span><br><span class="line">    <span class="keyword">new</span> Builder(nuxt).build()</span><br><span class="line">  &#125;</span><br><span class="line">  app.use(nuxt.render)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line">  initMiddleware(app)</span><br><span class="line">  initSession(app)</span><br><span class="line">  initNuxt(app)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> app</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>server/index.js</code>:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'module-alias/register'</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="built_in">require</span>(<span class="string">'@engine/express'</span>)()</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Application was started at the 3000th port`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">exports = <span class="built_in">module</span>.exports = app</span><br></pre></td></tr></table></figure></p>
<p>It looks much better now, isn’t it?<br>We also split our middlewares just for make sure we’re using it in right order.</p>
<h2 id="Express-extras"><a href="#Express-extras" class="headerlink" title="Express extras"></a>Express extras</h2><p>First of all, lets define <code>ip</code> and <code>port</code> in our configs:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ip: process.env.NODE_IP || <span class="string">'0.0.0.0'</span>,</span><br><span class="line">port: process.env.NODE_PORT || <span class="number">3000</span></span><br></pre></td></tr></table></figure></p>
<p>Now we could add little bit more logging information on server start:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'module-alias/register'</span>)</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'@config'</span>)</span><br><span class="line"><span class="keyword">const</span> logger = <span class="built_in">require</span>(<span class="string">'@engine/logger'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">'chalk'</span>)</span><br><span class="line"><span class="keyword">const</span> moment = <span class="built_in">require</span>(<span class="string">'moment'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="built_in">require</span>(<span class="string">'@engine/express'</span>)()</span><br><span class="line"></span><br><span class="line">logger.info(chalk.bold(<span class="string">'-----------------[ Server starting at %s ]-----------------'</span>), moment().format(<span class="string">'YYYY-MM-DD HH:mm:ss.SSS'</span>))</span><br><span class="line"></span><br><span class="line">app.listen(config.port, config.ip, () =&gt; &#123;</span><br><span class="line">  logger.info(<span class="string">'----------------------------[ Application started! ]----------------------------'</span>)</span><br><span class="line">  logger.info(<span class="string">`Environment:\t<span class="subst">$&#123;chalk.underline.bold(process.env.NODE_ENV)&#125;</span>`</span>)</span><br><span class="line">  logger.info(<span class="string">`IP:\t\t\t<span class="subst">$&#123;config.ip&#125;</span>`</span>)</span><br><span class="line">  logger.info(<span class="string">`Port:\t\t\t<span class="subst">$&#123;config.port&#125;</span>`</span>)</span><br><span class="line">  logger.info(<span class="string">'--------------------------------------------------------------------------------'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">exports = <span class="built_in">module</span>.exports = app</span><br></pre></td></tr></table></figure></p>
<h3 id="Compression"><a href="#Compression" class="headerlink" title="Compression"></a>Compression</h3><p>This package will compress server response.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add compression</span><br></pre></td></tr></table></figure></p>
<p>Include this into middlewares list of <code>express.js</code>:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> compress = <span class="built_in">require</span>(<span class="string">'compression'</span>)</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initMiddleware</span> (<span class="params">app</span>) </span>&#123;</span><br><span class="line">  app.use(compress(&#123;</span><br><span class="line">    filter: <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="regexp">/json|text|javascript|css/</span>.test(res.getHeader(<span class="string">'Content-Type'</span>))</span><br><span class="line">    &#125;,</span><br><span class="line">    level: <span class="number">3</span>,</span><br><span class="line">    threshold: <span class="number">512</span></span><br><span class="line">  &#125;))</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="Morgan"><a href="#Morgan" class="headerlink" title="Morgan"></a>Morgan</h3><p>It’s usefull to know what requests your server got. That’s why I recommend to include <code>morgan</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add morgan</span><br></pre></td></tr></table></figure></p>
<p><code>express.js</code>:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> logger = <span class="built_in">require</span>(<span class="string">'@engine/logger'</span>)</span><br><span class="line"><span class="keyword">const</span> morgan = <span class="built_in">require</span>(<span class="string">'morgan'</span>)</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initMiddleware</span> (<span class="params">app</span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">if</span> (env.isDev()) &#123;</span><br><span class="line">    <span class="keyword">const</span> Stream = <span class="built_in">require</span>(<span class="string">'stream'</span>).Stream</span><br><span class="line">    <span class="keyword">const</span> mlStream = <span class="keyword">new</span> Stream()</span><br><span class="line">    mlStream.writable = <span class="literal">true</span></span><br><span class="line">    mlStream.write = <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> logger.debug(data)</span><br><span class="line">    &#125;</span><br><span class="line">    app.use(morgan(<span class="string">'dev'</span>, &#123;</span><br><span class="line">      stream: mlStream</span><br><span class="line">    &#125;))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>This config using our <code>winston</code> logger for <code>morgan</code>.</p>
<h3 id="Helmet"><a href="#Helmet" class="headerlink" title="Helmet"></a>Helmet</h3><p>This little middleware adds some protection for requests to prevent some attacks.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add helmet</span><br></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> helmet = <span class="built_in">require</span>(<span class="string">'helmet'</span>)</span><br><span class="line">...</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Initiliaze Helmet security module</span></span><br><span class="line"><span class="comment"> * @param &#123;any&#125; app</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initHelmetHeaders</span> (<span class="params">app</span>) </span>&#123;</span><br><span class="line">  app.use(helmet.xssFilter())</span><br><span class="line">  app.use(helmet.noSniff())</span><br><span class="line">  app.use(helmet.frameguard())</span><br><span class="line">  app.use(helmet.ieNoOpen())</span><br><span class="line">  app.use(helmet.hidePoweredBy())</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line">  initMiddleware(app)</span><br><span class="line">  initHelmetHeaders(app)</span><br><span class="line">  initSession(app)</span><br><span class="line">  initNuxt(app)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> app</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Extra-helpers"><a href="#Extra-helpers" class="headerlink" title="Extra helpers"></a>Extra helpers</h2><h3 id="Safe-stop"><a href="#Safe-stop" class="headerlink" title="Safe stop"></a>Safe stop</h3><p>For further work we have to be sure server stopped correctly, all connections closed, etc. So let’s make new helper <code>safeStop.js</code>:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> logger = <span class="built_in">require</span>(<span class="string">'@engine/logger'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">'chalk'</span>)</span><br><span class="line"><span class="keyword">const</span> moment = <span class="built_in">require</span>(<span class="string">'moment'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> smoothExit = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> exit = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    logger.info()</span><br><span class="line">    logger.info(chalk.bold(<span class="string">'------[ Server stopped at %s Uptime: %s ]------'</span>), moment().format(<span class="string">'YYYY-MM-DD HH:mm:ss.SSS'</span>), moment.duration(process.uptime() * <span class="number">1000</span>).humanize())</span><br><span class="line">    <span class="keyword">return</span> process.exit(<span class="number">0</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> exit()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">process.on(<span class="string">'SIGINT'</span>, smoothExit).on(<span class="string">'SIGTERM'</span>, smoothExit)</span><br></pre></td></tr></table></figure></p>
<p>And call this in the <code>server/index.js</code> before <code>app.listen</code>:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'@helpers/safeStop'</span>)</span><br><span class="line">...</span><br><span class="line">app.listen(...)</span><br></pre></td></tr></table></figure></p>
<h3 id="System-info"><a href="#System-info" class="headerlink" title="System info"></a>System info</h3><p>Let’s print information about system where server started. Make <code>sysinfo.js</code> helper.<br>It require some additional packages:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add clui pretty-bytes</span><br></pre></td></tr></table></figure></p>
<p><code>server/helpers/sysinfo.js</code>:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> logger = <span class="built_in">require</span>(<span class="string">'@engine/logger'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> os = <span class="built_in">require</span>(<span class="string">'os'</span>)</span><br><span class="line"><span class="keyword">const</span> gauge = <span class="built_in">require</span>(<span class="string">'clui'</span>).Gauge</span><br><span class="line"><span class="keyword">const</span> pretty = <span class="built_in">require</span>(<span class="string">'pretty-bytes'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> total = os.totalmem()</span><br><span class="line"><span class="keyword">const</span> free = os.freemem()</span><br><span class="line"><span class="keyword">const</span> used = total - free</span><br><span class="line"><span class="keyword">const</span> human = pretty(free)</span><br><span class="line"></span><br><span class="line">logger.info(<span class="string">`CPU:\t\t\tArch: <span class="subst">$&#123;os.arch()&#125;</span>, Cores: <span class="subst">$&#123;os.cpus().length&#125;</span>`</span>)</span><br><span class="line">logger.info(<span class="string">`Memory:\t\t<span class="subst">$&#123;gauge(used, total, <span class="number">20</span>, total * <span class="number">0.8</span>, human + <span class="string">' free'</span>)&#125;</span>`</span>)</span><br><span class="line">logger.info(<span class="string">`OS:\t\t\t<span class="subst">$&#123;os.platform()&#125;</span> (<span class="subst">$&#123;os.type()&#125;</span>)`</span>)</span><br></pre></td></tr></table></figure></p>
<p>And call him after server start inside <code>app.listen</code>:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.listen(..., () =&gt; &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'@helpers/sysinfo'</span>)</span><br><span class="line">  logger.info(<span class="string">'--------------------------------------------------------------------------------'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>This part wraps up <code>03-logging-split-extras</code> git branch.</p>
]]></content>
      
        <categories>
            
            <category> full-stack </category>
            
            <category> NEMVN </category>
            
        </categories>
        
        
        <tags>
            
            <tag> express </tag>
            
            <tag> log </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Full Stack (Node + Express + MongoDb + Vue + Nuxt) application. Part 2: Helpers, Configs and Session]]></title>
      <url>/2018/02/13/02-nemvn/</url>
      <content type="html"><![CDATA[<h2 id="Helpers"><a href="#Helpers" class="headerlink" title="Helpers"></a>Helpers</h2><p>Helpers will land in <code>server/helpers</code> directory, so add an alias in <code>package.json</code> for it:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;@helpers&quot;: &quot;./server/helpers&quot;</span><br></pre></td></tr></table></figure></p>
<h3 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h3><p>Let’s add <code>env.js</code> helper which checks our environment:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  isDev () &#123;</span><br><span class="line">    <span class="keyword">return</span> !process.env.NODE_ENV || process.env.NODE_ENV === <span class="string">'development'</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  isProduction () &#123;</span><br><span class="line">    <span class="keyword">return</span> process.env.NODE_ENV === <span class="string">'production'</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  isTest () &#123;</span><br><span class="line">    <span class="keyword">return</span> process.env.NODE_ENV === <span class="string">'test'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>To export this module in easy way lets make an <code>index</code> for helpers:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> env = <span class="built_in">require</span>(<span class="string">'./env'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  env</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="Token-generator"><a href="#Token-generator" class="headerlink" title="Token generator"></a>Token generator</h3><p>Another one nifty helper intended for token generation for secrets.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add uuid-token-generator</span><br></pre></td></tr></table></figure></p>
<p><code>tokgen.js</code>:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> TokenGenerator = <span class="built_in">require</span>(<span class="string">'uuid-token-generator'</span>)</span><br><span class="line"><span class="keyword">let</span> tokgen = <span class="keyword">new</span> TokenGenerator(<span class="number">256</span>, TokenGenerator.BASE62)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> tokgen.generate()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>And extend index file for this new helper:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> env = <span class="built_in">require</span>(<span class="string">'./env'</span>)</span><br><span class="line"><span class="keyword">const</span> tokgen = <span class="built_in">require</span>(<span class="string">'./tokgen'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  env,</span><br><span class="line">  tokgen</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Configs"><a href="#Configs" class="headerlink" title="Configs"></a>Configs</h2><p>Config should be flexible, so we have to merge it into separate files:</p>
<ul>
<li><code>base.js</code> - basic configuration which should be a skeleton of config;</li>
<li><code>config.template.js</code> - <strong>template</strong> for <code>config.js</code> file, which could be used to set your own secrets. It is excluded from git, so we need a template to create new one if there’s new instance;</li>
<li><code>dev.js</code>, <code>prod.js</code> and <code>test.js</code> - confings based on environment;</li>
<li><code>index.js</code> - summary config.<br>Let’s init them with following code:<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>As an example let’s make a session config.<br><code>base.js</code>:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  session: &#123;</span><br><span class="line">    resave: <span class="literal">true</span>,</span><br><span class="line">    saveUninitialized: <span class="literal">false</span>,</span><br><span class="line">    cookie: &#123;</span><br><span class="line">      <span class="comment">// reset session after 1 week</span></span><br><span class="line">      maxAge: <span class="number">7</span> * <span class="number">24</span> * (<span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>),</span><br><span class="line">      <span class="comment">// we will use cookies just for HTTP, not js</span></span><br><span class="line">      <span class="comment">// JS will send this cookies only from current domain</span></span><br><span class="line">      httpOnly: <span class="literal">true</span>,</span><br><span class="line">      <span class="comment">// should be 'true' if you're using https</span></span><br><span class="line">      secure: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Now we have almost complete session config but <code>secret</code>. Each user have to define his own session, so lets make our template which will generate <code>secret</code> for a session if there’s no <code>config.js</code> file.<br><code>config.template.js</code>:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  session: &#123;</span><br><span class="line">    secret: <span class="string">'&#123;&#123;sessionSecret&#125;&#125;'</span>,</span><br><span class="line">    resave: <span class="literal">true</span>,</span><br><span class="line">    saveUninitialized: <span class="literal">false</span>,</span><br><span class="line">    cookie: &#123;</span><br><span class="line">      <span class="comment">// reset session after 1 week</span></span><br><span class="line">      maxAge: <span class="number">7</span> * <span class="number">24</span> * (<span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>),</span><br><span class="line">      <span class="comment">// we will use cookies just for HTTP, not js</span></span><br><span class="line">      <span class="comment">// JS will send this cookies only from current domain</span></span><br><span class="line">      httpOnly: <span class="literal">true</span>,</span><br><span class="line">      <span class="comment">// should be 'true' if you're using https</span></span><br><span class="line">      secure: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code></code> and another stuff in double braces will be replaced with provided data.<br>To improve console logging and js functionality I gonna include this modules into project:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add chalk lodash</span><br></pre></td></tr></table></figure></p>
<p>There’s how <code>index.js</code> file looks:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> _ = <span class="built_in">require</span>(<span class="string">'lodash'</span>)</span><br><span class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">'chalk'</span>)</span><br><span class="line"><span class="keyword">const</span> &#123;tokgen, env&#125; = <span class="built_in">require</span>(<span class="string">'@helpers'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> config = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">// [1]</span></span><br><span class="line">  <span class="keyword">if</span> (!fs.existsSync(path.join(__dirname, <span class="string">'config.js'</span>))) &#123;</span><br><span class="line">    <span class="built_in">console</span>.warn(chalk.yellow.bold(<span class="string">'`config.js` for server settings was not found! Generating new `config.js` file'</span>))</span><br><span class="line">    <span class="keyword">const</span> template = fs.readFileSync(path.join(__dirname, <span class="string">'config.template.js'</span>))</span><br><span class="line">    _.templateSettings.interpolate = <span class="regexp">/&#123;&#123;([\s\S]+?)&#125;&#125;/g</span></span><br><span class="line">    <span class="keyword">const</span> compiled = _.template(template)</span><br><span class="line">    <span class="keyword">const</span> replacements = &#123;</span><br><span class="line">      sessionSecret: tokgen()</span><br><span class="line">    &#125;</span><br><span class="line">    fs.writeFileSync(path.join(__dirname, <span class="string">'config.js'</span>), compiled(replacements))</span><br><span class="line">    <span class="built_in">console</span>.warn(chalk.green.bold(<span class="string">'New `config.js` for server settings file was generated. You could update your settings here: "server/config/config.js"'</span>))</span><br><span class="line">  &#125;</span><br><span class="line">  config = <span class="built_in">require</span>(<span class="string">'./config'</span>)</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="built_in">console</span>.warn(chalk.red.bold(<span class="string">'\r\n=============================================='</span>))</span><br><span class="line">  <span class="built_in">console</span>.warn(chalk.red.bold(<span class="string">'  Unable to load external `config.js` file!'</span>))</span><br><span class="line">  <span class="built_in">console</span>.warn(chalk.red.bold(<span class="string">' '</span>, error))</span><br><span class="line">  <span class="built_in">console</span>.warn(chalk.red.bold(<span class="string">'==============================================\r\n'</span>))</span><br><span class="line">  process.exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// [2]</span></span><br><span class="line"><span class="keyword">let</span> envConfig = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (env.isDev()) &#123;</span><br><span class="line">  envConfig = <span class="built_in">require</span>(<span class="string">'./dev'</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (env.isTest()) &#123;</span><br><span class="line">  envConfig = <span class="built_in">require</span>(<span class="string">'./test'</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (env.isProduction()) &#123;</span><br><span class="line">  envConfig = <span class="built_in">require</span>(<span class="string">'./prod'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// [3]</span></span><br><span class="line"><span class="keyword">const</span> base = <span class="built_in">require</span>(<span class="string">'./base'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = _.defaultsDeep(envConfig, config, base)</span><br></pre></td></tr></table></figure></p>
<p>First of all we have to check is there <code>config.js</code> [1] file exists. If no we’re reading our <code>config.template.js</code> and replace template variables with generated values and make <code>config.js</code>.<br>Next [2] we’re reading environment-based config and [3] base one, than return merged config.<br>Last thing is module alias for <code>config</code> folder:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;@config&quot;: &quot;./server/config&quot;</span><br></pre></td></tr></table></figure></p>
<h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add express-session cookie-parser body-parser</span><br></pre></td></tr></table></figure>
<p>Add using of session in our application lets extend <code>server/index.js</code> file:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'module-alias/register'</span>)</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'@config'</span>)</span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">'express-session'</span>)</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>)</span><br><span class="line"><span class="keyword">const</span> cookieParser = <span class="built_in">require</span>(<span class="string">'cookie-parser'</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> configSession = config.session</span><br><span class="line">app.use(bodyParser.urlencoded(&#123;</span><br><span class="line">  extended: <span class="literal">true</span></span><br><span class="line">&#125;))</span><br><span class="line">app.use(bodyParser.json())</span><br><span class="line">app.use(cookieParser())</span><br><span class="line">app.use(session(configSession))</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123;Nuxt, Builder&#125; = <span class="built_in">require</span>(<span class="string">'nuxt'</span>)</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p>
<p>This part wraps up <code>02-helpers-config-session</code> git branch.</p>
]]></content>
      
        <categories>
            
            <category> full-stack </category>
            
            <category> NEMVN </category>
            
        </categories>
        
        
        <tags>
            
            <tag> express </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Full Stack (Node + Express + MongoDb + Vue + Nuxt) application. Part 2: Nuxt and Expres]]></title>
      <url>/2018/02/12/01-nemvn/</url>
      <content type="html"><![CDATA[<h2 id="Nuxt"><a href="#Nuxt" class="headerlink" title="Nuxt"></a>Nuxt</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn add nuxt</span><br><span class="line">yarn add stylus stylus-loader --dev</span><br></pre></td></tr></table></figure>
<p>Lets make <code>client</code> directory in our project. It will contain whole frontend code made with <code>Nuxt</code>.<br>Also, create <code>nuxt.config.js</code> in the root folder to define Nuxt settings.<br>Lets define client directory and loader color:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  loading: &#123;<span class="attr">color</span>: <span class="string">'#3B8070'</span>&#125;,</span><br><span class="line">  srcDir: <span class="string">'client/'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Lets make a single page. Create <code>client/pages</code> directory and <code>index.vue</code> file within. Then fill this file with some test data:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        Hello #&#123;&#123; counter &#125;&#125;</span><br><span class="line">    &lt;button @click=&quot;counter = counter +1&quot;&gt;+1&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">      data () &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">          counter: 0</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;stylus&quot;&gt;</span><br><span class="line">    div</span><br><span class="line">        background-color lightblue</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p>
<h2 id="Express"><a href="#Express" class="headerlink" title="Express"></a>Express</h2><p>Lets make an entry point: in the <code>server</code> directory create <code>index.js</code>.<br>Before further work we have to install some modules:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add express</span><br></pre></td></tr></table></figure></p>
<p><code>server/index.js</code>:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'module-alias/register'</span>) <span class="comment">// Details at Part 0/Module alias </span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123;Nuxt, Builder&#125; = <span class="built_in">require</span>(<span class="string">'nuxt'</span>)</span><br><span class="line"><span class="keyword">const</span> nuxtConfig = <span class="built_in">require</span>(<span class="string">'@/nuxt.config'</span>)</span><br><span class="line">nuxtConfig.dev = process.env.NODE_ENV !== <span class="string">'production'</span></span><br><span class="line"><span class="keyword">const</span> nuxt = <span class="keyword">new</span> Nuxt(nuxtConfig)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (nuxtConfig.dev) &#123;</span><br><span class="line">  <span class="keyword">new</span> Builder(nuxt).build()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.use(nuxt.render)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Application was started at the 3000th port`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">exports = <span class="built_in">module</span>.exports = app</span><br></pre></td></tr></table></figure></p>
<p>Now we should modify our <code>package.json</code> and set our main script to <code>server/index.js</code>.<br>That’s all. Now we can run our server with <code>yarn run</code> and we’ll got simple page located on <code>http://localhost:3000</code>.<br>This part wraps up <code>01-nuxt-express</code> git branch.</p>
]]></content>
      
        <categories>
            
            <category> full-stack </category>
            
            <category> NEMVN </category>
            
        </categories>
        
        
        <tags>
            
            <tag> nuxt </tag>
            
            <tag> express </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Full Stack (Node + Express + MongoDb + Vue + Nuxt) application. Part 0: Usefull stuff]]></title>
      <url>/2018/02/12/00-nemvn/</url>
      <content type="html"><![CDATA[<h2 id="Begin"><a href="#Begin" class="headerlink" title="Begin"></a>Begin</h2><p>To start new project create new directory and run this commends to init node application and git:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn init</span><br><span class="line">git init</span><br></pre></td></tr></table></figure></p>
<p>I will use <code>yarn</code>, but you could use <code>npm</code>, commands are mostly the same.<br>To configure git lets add <code>.gitignore</code> file:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">################################################</span><br><span class="line"># Dependencies</span><br><span class="line">################################################</span><br><span class="line"></span><br><span class="line">node_modules</span><br><span class="line"></span><br><span class="line">################################################</span><br><span class="line"># Node.js / NPM</span><br><span class="line">################################################</span><br><span class="line"></span><br><span class="line">lib-cov</span><br><span class="line">*.seed</span><br><span class="line">*.log</span><br><span class="line">*.out</span><br><span class="line">*.pid</span><br><span class="line">npm-debug.log</span><br><span class="line"></span><br><span class="line">################################################</span><br><span class="line"># Miscellaneous</span><br><span class="line">################################################</span><br><span class="line"></span><br><span class="line">*~</span><br><span class="line">*#</span><br><span class="line">.DS_STORE</span><br><span class="line">.netbeans</span><br><span class="line">nbproject</span><br><span class="line">.idea</span><br><span class="line">.node_history</span><br><span class="line">dump.rdb</span><br><span class="line">.nuxt</span><br><span class="line">.vscode</span><br></pre></td></tr></table></figure></p>
<h2 id="Linter"><a href="#Linter" class="headerlink" title="Linter"></a>Linter</h2><p>Let’s add some style check:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn add eslint</span><br><span class="line">.\node_modules\.bin\eslint --init</span><br><span class="line">yarn install</span><br></pre></td></tr></table></figure></p>
<p>We will use <code>Standard</code> style guide in JSON format.<br>Let’s expand it little bit:<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"env"</span>: &#123;</span><br><span class="line">        <span class="attr">"es6"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"node"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"mocha"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"parserOptions"</span>: &#123;</span><br><span class="line">        <span class="attr">"ecmaVersion"</span>: <span class="number">8</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"extends"</span>: <span class="string">"standard"</span>,</span><br><span class="line">    <span class="attr">"rules"</span>: &#123;</span><br><span class="line">        <span class="attr">"arrow-parens"</span>: [<span class="string">"error"</span>, <span class="string">"as-needed"</span>],</span><br><span class="line">        <span class="attr">"linebreak-style"</span>: [<span class="string">"error"</span>, <span class="string">"unix"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>It will extend our environment, set ECMA Script version to 8th and define some rules.</p>
<h2 id="Module-alias"><a href="#Module-alias" class="headerlink" title="Module alias"></a>Module alias</h2><p>Working with relative path is kidna hard, so lets make it easier:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add module-alias</span><br></pre></td></tr></table></figure></p>
<p>Now we can define aliases which will makes relative paths looks like absolute one.<br>In the <code>package.json</code> we could add new section <code>_moduleAliases</code> and define some paths:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;_moduleAliases&quot;: &#123;</span><br><span class="line">  &quot;@&quot;: &quot;.&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>@ - root path</li>
</ul>
<h2 id="Cross-env-variables"><a href="#Cross-env-variables" class="headerlink" title="Cross env variables"></a>Cross env variables</h2><p>To define node environment variables in <code>package.json</code> you could send it before running node by itself, but in the windows it won’t work, so let’s fix that:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add cross-env</span><br></pre></td></tr></table></figure></p>
<p>Now we can add some scripts:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;start&quot;: &quot;nuxt build &amp; cross-env NODE_ENV=production node server/index.js&quot;,</span><br><span class="line">&quot;dev&quot;: &quot;node server/index.js&quot;</span><br></pre></td></tr></table></figure></p>
<h2 id="Handling-date-and-time"><a href="#Handling-date-and-time" class="headerlink" title="Handling date and time"></a>Handling date and time</h2><p>Let’s use <code>moment</code> package for date and time:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add moment</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> full-stack </category>
            
            <category> NEMVN </category>
            
        </categories>
        
        
        <tags>
            
            <tag> eslint </tag>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
