<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Full Stack (Node + Express + MongoDb + Vue + Nuxt) application. Part 4: MongoDb]]></title>
      <url>/2018/02/13/04-nemvn/</url>
      <content type="html"><![CDATA[<h2 id="Connection"><a href="#Connection" class="headerlink" title="Connection"></a>Connection</h2><p>We’re going to use <code>mongoose</code> to communicate with our MongoDb instance. Make sure MongoDb running and configured.<br>For storing sessions in the database we also need <code>connect-mongo</code> package.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add mongoose connect-mongo</span><br></pre></td></tr></table></figure></p>
<p>Configs for mongo connection looks like this:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">db: &#123;</span><br><span class="line">  uri: <span class="string">'mongodb://localhost/nemvn?authSource=admin'</span>,</span><br><span class="line">  options: &#123;</span><br><span class="line">    user: <span class="string">'admin'</span>,</span><br><span class="line">    pass: <span class="string">'admin'</span>,</span><br><span class="line">    socketTimeoutMS: <span class="number">0</span>,</span><br><span class="line">    keepAlive: <span class="literal">true</span>,</span><br><span class="line">    reconnectTries: <span class="number">30</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Make sure you’re set correct <code>user</code> and <code>pass</code> for your mongo instance. If there’s no auth - just remove this options from list.</p>
<h2 id="Initialization"><a href="#Initialization" class="headerlink" title="Initialization"></a>Initialization</h2><p>MongoDb initialization will be described in <code>server/engine/mongo.js</code>:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'@config'</span>)</span><br><span class="line"><span class="keyword">const</span> logger = <span class="built_in">require</span>(<span class="string">'@engine/logger'</span>)</span><br><span class="line"><span class="keyword">const</span> &#123;env&#125; = <span class="built_in">require</span>(<span class="string">'@helpers'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">'chalk'</span>)</span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  mongoose.Promise = global.Promise</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (mongoose.connection.readyState !== <span class="number">1</span>) &#123;</span><br><span class="line">    logger.info(<span class="string">`Connecting to Mongo <span class="subst">$&#123;config.db.uri&#125;</span> ...`</span>)</span><br><span class="line">    mongoose.connection.on(<span class="string">'error'</span>, err =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err.message.code === <span class="string">'ETIMEDOUT'</span>) &#123;</span><br><span class="line">        logger.warn(<span class="string">'Mongo connection timeout!'</span>, err)</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          mongoose.connect(config.db.uri, config.db.options)</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      logger.error(<span class="string">'Could not connect to MongoDB!'</span>)</span><br><span class="line">      <span class="keyword">return</span> logger.error(err)</span><br><span class="line">    &#125;)</span><br><span class="line">    mongoose.connection.once(<span class="string">'open'</span>, () =&gt; &#123;</span><br><span class="line">      logger.info(chalk.yellow.bold(<span class="string">'Mongo DB connected.'</span>))</span><br><span class="line">      logger.info()</span><br><span class="line">    &#125;)</span><br><span class="line">    mongoose.connect(config.db.uri, config.db.options)</span><br><span class="line">      .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        mongoose.set(<span class="string">'debug'</span>, env.isDev())</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        logger.error(<span class="string">'Could not connect to MongoDB!'</span>)</span><br><span class="line">        <span class="keyword">return</span> logger.error(err)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    logger.info(<span class="string">'Mongo already connected.'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> mongoose.connection</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Connection process is simple. There’s some extra handlers for logging.<br>We should init MongoDb before express:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> db = <span class="built_in">require</span>(<span class="string">'@engine/mongo'</span>)()</span><br><span class="line"><span class="keyword">const</span> app = <span class="built_in">require</span>(<span class="string">'@engine/express'</span>)(db)</span><br></pre></td></tr></table></figure></p>
<h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><p>Now we can use this MongoDb instance as session storage.<br>As you can see above, we passed <code>db</code> constant into express init function, let’s handle this:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MongoStore = <span class="built_in">require</span>(<span class="string">'connect-mongo'</span>)(session)</span><br><span class="line">...</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Initialize session</span></span><br><span class="line"><span class="comment"> * @param &#123;any&#125; app</span></span><br><span class="line"><span class="comment"> * @param &#123;db&#125; db</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initSession</span> (<span class="params">app, db</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> configSession = config.session</span><br><span class="line">  configSession.store = <span class="keyword">new</span> MongoStore(&#123;</span><br><span class="line">    mongooseConnection: db,</span><br><span class="line">    autoReconnect: <span class="literal">true</span></span><br><span class="line">  &#125;)</span><br><span class="line">  app.use(session(configSession))</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">db</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line">  initMiddleware(app)</span><br><span class="line">  initHelmetHeaders(app)</span><br><span class="line">  initSession(app, db)</span><br><span class="line">  initNuxt(app)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> app</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Now all sessions will be saved in the database.<br>NB: we’re saving just initialized sessions of authorized users. There’s no users atm, so you could set <code>saveUninitialized</code> to <code>true</code> in your config to look how it works.</p>
<h2 id="Close-connection"><a href="#Close-connection" class="headerlink" title="Close connection"></a>Close connection</h2><p>The final thing is about connection closing when server have to stop. Let’s modify helper <code>safeStop.js</code>:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> logger = <span class="built_in">require</span>(<span class="string">'@engine/logger'</span>)</span><br><span class="line"><span class="keyword">const</span> env = <span class="built_in">require</span>(<span class="string">'./env'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">'chalk'</span>)</span><br><span class="line"><span class="keyword">const</span> moment = <span class="built_in">require</span>(<span class="string">'moment'</span>)</span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> smoothExit = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> exit = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    logger.info()</span><br><span class="line">    logger.info(chalk.bold(<span class="string">'------[ Server stopped at %s Uptime: %s ]------'</span>), moment().format(<span class="string">'YYYY-MM-DD HH:mm:ss.SSS'</span>), moment.duration(process.uptime() * <span class="number">1000</span>).humanize())</span><br><span class="line">    <span class="keyword">return</span> process.exit(<span class="number">0</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (mongoose.connection.readyState === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> exit()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (env.isTest()) <span class="keyword">await</span> mongoose.connection.dropDatabase()</span><br><span class="line">    <span class="keyword">await</span> mongoose.connection.close()</span><br><span class="line">    <span class="keyword">return</span> exit()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">process.on(<span class="string">'SIGINT'</span>, smoothExit).on(<span class="string">'SIGTERM'</span>, smoothExit)</span><br></pre></td></tr></table></figure></p>
<p>This part wraps up <code>04-mongo</code> git branch.</p>
]]></content>
      
        <categories>
            
            <category> full-stack </category>
            
            <category> NEMVN </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mongo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Full Stack (Node + Express + MongoDb + Vue + Nuxt) application. Part 3: Logging, initialization splitting and more helpers]]></title>
      <url>/2018/02/13/03-nemvn/</url>
      <content type="html"><![CDATA[<h2 id="Logging"><a href="#Logging" class="headerlink" title="Logging"></a>Logging</h2><p>Console logging is good, but it doesn’t cover all needs. Server could turn off instantly and you won’t see any messages, or there’s plenty errors and you have no time to read a single one, etc.<br>Let’s take a look for other logging variations.<br>There’s already good module to achieve different behaviours:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add winston</span><br></pre></td></tr></table></figure></p>
<p>Files, belong using for init our application and other nifty functions which require config will land into <code>server/engine</code> directory. Make sure to include it into your module aliases list:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;@engine&quot;: &quot;./server/engine&quot;</span><br></pre></td></tr></table></figure></p>
<p>Lets make a new file <code>logger.js</code> with console output:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> winston = <span class="built_in">require</span>(<span class="string">'winston'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'@config'</span>)</span><br><span class="line"><span class="keyword">const</span> &#123;env&#125; = <span class="built_in">require</span>(<span class="string">'@helpers'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> transports = []</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Console transporter</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">transports.push(<span class="keyword">new</span> winston.transports.Console(&#123;</span><br><span class="line">  level: config.logging.console.level,</span><br><span class="line">  colorize: <span class="literal">true</span>,</span><br><span class="line">  prettyPrint: <span class="literal">true</span>,</span><br><span class="line">  handleExceptions: env.isProduction()</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">// [before]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> logger = <span class="keyword">new</span> winston.Logger(&#123;</span><br><span class="line">  level: <span class="string">'debug'</span>,</span><br><span class="line">  transports: transports,</span><br><span class="line">  exitOnError: <span class="literal">false</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// [after]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = logger</span><br></pre></td></tr></table></figure></p>
<p>As you can see we’re using <code>config.logging.console.level</code> variable to define level of console logging. Let’s extend our <code>config.template.js</code> for logging:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">logging: &#123;</span><br><span class="line">  <span class="built_in">console</span>: &#123;</span><br><span class="line">    level: <span class="string">'debug'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>We could redefine this level for some environments. For production we could use this:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">logging: &#123;</span><br><span class="line">  <span class="built_in">console</span>: &#123;</span><br><span class="line">    level: <span class="string">'error'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Further loggers require some additional packages to install, some config and init function which should be placed [before] or [after] logger init.</p>
<h3 id="File-before"><a href="#File-before" class="headerlink" title="File [before]"></a>File [before]</h3><p>packages:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add mkdirp winston-daily-rotate-file</span><br></pre></td></tr></table></figure></p>
<p>config:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">file: &#123;</span><br><span class="line">  enabled: <span class="literal">true</span>,</span><br><span class="line">  path: path.normalize(path.join(__dirname, <span class="string">'..'</span>, <span class="string">'..'</span>, <span class="string">'logs'</span>)),</span><br><span class="line">  level: <span class="string">'info'</span>,</span><br><span class="line">  json: <span class="literal">false</span>,</span><br><span class="line">  exceptionFile: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>NB: you should add <code>const path = require(&#39;path&#39;)</code> at the begin of your config files if you use <code>path</code>.<br>init:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> mkdirp = <span class="built_in">require</span>(<span class="string">'mkdirp'</span>)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * File transporter</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (config.logging.file.enabled) &#123;</span><br><span class="line">  <span class="comment">// Create logs directory</span></span><br><span class="line">  <span class="keyword">const</span> logDir = config.logging.file.path</span><br><span class="line">  <span class="keyword">if</span> (!fs.existsSync(logDir)) &#123;</span><br><span class="line">    mkdirp(logDir)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  transports.push(<span class="keyword">new</span> (<span class="built_in">require</span>(<span class="string">'winston-daily-rotate-file'</span>))(&#123;</span><br><span class="line">    filename: path.join(logDir, <span class="string">'server.log'</span>),</span><br><span class="line">    level: config.logging.file.level || <span class="string">'info'</span>,</span><br><span class="line">    timestamp: <span class="literal">true</span>,</span><br><span class="line">    json: config.logging.file.json || <span class="literal">false</span>,</span><br><span class="line">    handleExceptions: <span class="literal">true</span></span><br><span class="line">  &#125;))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (config.logging.file.exceptionFile) &#123;</span><br><span class="line">    transports.push(<span class="keyword">new</span> winston.transports.File(&#123;</span><br><span class="line">      filename: path.join(logDir, <span class="string">'exceptions.log'</span>),</span><br><span class="line">      level: <span class="string">'error'</span>,</span><br><span class="line">      timestamp: <span class="literal">true</span>,</span><br><span class="line">      json: config.logging.file.json || <span class="literal">false</span>,</span><br><span class="line">      prettyPrint: <span class="literal">true</span>,</span><br><span class="line">      handleExceptions: <span class="literal">true</span>,</span><br><span class="line">      humanReadableUnhandledException: <span class="literal">true</span></span><br><span class="line">    &#125;))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="Logentries-before"><a href="#Logentries-before" class="headerlink" title="Logentries [before]"></a><a href="https://logentries.com/" target="_blank" rel="noopener">Logentries</a> [before]</h3><p>packages:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add le_node</span><br></pre></td></tr></table></figure></p>
<p>config:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">logentries: &#123;</span><br><span class="line">  enabled: <span class="literal">false</span>,</span><br><span class="line">  token: <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>init:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Logentries transporter</span></span><br><span class="line"><span class="comment"> * https://logentries.com/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (config.logging.logentries.enabled &amp;&amp; config.logging.logentries.token) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Logentries log transport enabled!'</span>)</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'le_node'</span>)</span><br><span class="line">  transports.push(<span class="keyword">new</span> winston.transports.Logentries(&#123;</span><br><span class="line">    level: <span class="string">'debug'</span>,</span><br><span class="line">    token: config.logging.logentries.token</span><br><span class="line">  &#125;))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="Papertrail-before"><a href="#Papertrail-before" class="headerlink" title="Papertrail [before]"></a><a href="https://papertrailapp.com/" target="_blank" rel="noopener">Papertrail</a> [before]</h3><p>packages:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add winston-papertrail</span><br></pre></td></tr></table></figure></p>
<p>config:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">papertrail: &#123;</span><br><span class="line">  enabled: <span class="literal">false</span>,</span><br><span class="line">  host: <span class="literal">null</span>,</span><br><span class="line">  port: <span class="literal">null</span>,</span><br><span class="line">  level: <span class="string">'debug'</span>,</span><br><span class="line">  program: <span class="string">'vem'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>init:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Papertrail transporter</span></span><br><span class="line"><span class="comment"> * https://papertrailapp.com/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (config.logging.papertrail.enabled) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Papertrail log transport enabled!'</span>)</span><br><span class="line">  <span class="comment">// eslint-disable-next-line no-unused-expressions</span></span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'winston-papertrail'</span>).Papertrail</span><br><span class="line">  transports.push(<span class="keyword">new</span> winston.transports.Papertrail(config.logging.papertrail))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="Loggly-after"><a href="#Loggly-after" class="headerlink" title="Loggly [after]"></a><a href="https://www.loggly.com/" target="_blank" rel="noopener">Loggly</a> [after]</h3><p>packages:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add winston-loggly-bulk</span><br></pre></td></tr></table></figure></p>
<p>config:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">loggly: &#123;</span><br><span class="line">  enabled: <span class="literal">false</span>,</span><br><span class="line">  token: <span class="literal">null</span>,</span><br><span class="line">  subdomain: <span class="literal">null</span>,</span><br><span class="line">  tags: [],</span><br><span class="line">  json: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>init:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Loggly transporter</span></span><br><span class="line"><span class="comment"> * https://www.loggly.com/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (config.logging.loggly.enabled &amp;&amp; config.logging.loggly.token) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Loggly log transport enabled!'</span>)</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'winston-loggly-bulk'</span>)</span><br><span class="line">  logger.add(winston.transports.Loggly, &#123;</span><br><span class="line">    inputToken: config.logging.loggly.token,</span><br><span class="line">    subdomain: config.logging.loggly.subdomain,</span><br><span class="line">    tags: config.logging.loggly.tags,</span><br><span class="line">    json: config.logging.loggly.json</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="Logsene-after"><a href="#Logsene-after" class="headerlink" title="Logsene [after]"></a><a href="https://sematext.com/logsene/" target="_blank" rel="noopener">Logsene</a> [after]</h3><p>packages:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add winston-logsene</span><br></pre></td></tr></table></figure></p>
<p>config:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">logsene: &#123;</span><br><span class="line">  enabled: <span class="literal">false</span>,</span><br><span class="line">  token: <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>init:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Logsene transporter</span></span><br><span class="line"><span class="comment"> * https://sematext.com/logsene/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (config.logging.logsene.enabled &amp;&amp; config.logging.logsene.token) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Logsene log transport enabled!'</span>)</span><br><span class="line">  <span class="keyword">const</span> logsene = <span class="built_in">require</span>(<span class="string">'winston-logsene'</span>)</span><br><span class="line">  logger.add(logsene, &#123;</span><br><span class="line">    type: <span class="string">'vem-server'</span>,</span><br><span class="line">    token: config.logging.logsene.token</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="Logz-io-after"><a href="#Logz-io-after" class="headerlink" title="Logz.io [after]"></a><a href="https://logz.io/" target="_blank" rel="noopener">Logz.io</a> [after]</h3><p>packages:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add winston-logzio</span><br></pre></td></tr></table></figure></p>
<p>config:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">logzio: &#123;</span><br><span class="line">  enabled: <span class="literal">false</span>,</span><br><span class="line">  token: <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>init:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Logz.io transporter</span></span><br><span class="line"><span class="comment"> * https://logz.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (config.logging.logzio.enabled &amp;&amp; config.logging.logzio.token) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Logz.io log transport enabled!'</span>)</span><br><span class="line">  <span class="keyword">const</span> logzio = <span class="built_in">require</span>(<span class="string">'winston-logzio'</span>)</span><br><span class="line">  logger.add(logzio, &#123;</span><br><span class="line">    token: config.logging.logzio.token</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="Graylog-after"><a href="#Graylog-after" class="headerlink" title="Graylog [after]"></a><a href="https://www.graylog.org/" target="_blank" rel="noopener">Graylog</a> [after]</h3><p>packages:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add winston-graylog2</span><br></pre></td></tr></table></figure></p>
<p>config:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graylog: &#123;</span><br><span class="line">  enabled: <span class="literal">false</span>,</span><br><span class="line">  servers: [&#123;<span class="attr">host</span>: <span class="string">'192.168.1.100'</span>, <span class="attr">port</span>: <span class="number">12201</span>&#125;],</span><br><span class="line">  facility: <span class="string">'MEVN'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>init:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Graylog transporter</span></span><br><span class="line"><span class="comment"> * https://www.graylog.org/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (config.logging.graylog.enabled) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Graylog log transport enabled! Servers: '</span> + <span class="built_in">JSON</span>.stringify(config.logging.graylog.servers))</span><br><span class="line">  <span class="keyword">let</span> graylog = <span class="built_in">require</span>(<span class="string">'winston-graylog2'</span>)</span><br><span class="line">  logger.add(graylog, &#123;</span><br><span class="line">    name: <span class="string">'Graylog'</span>,</span><br><span class="line">    level: <span class="string">'debug'</span>,</span><br><span class="line">    graylog: &#123;</span><br><span class="line">      servers: config.logging.graylog.servers,</span><br><span class="line">      facility: config.logging.graylog.facility</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Entry-point"><a href="#Entry-point" class="headerlink" title="Entry point"></a>Entry point</h2><p>Our <code>server/index.js</code> intended for complete server init and have a lot of stuff to init to. Now there’s just express, sessions and nuxt init, but this file will grow. Best practice is split this file.<br>We already have an <code>engine</code> directory, so let’s move our express initialization into <code>express.js</code> file located in the <code>engine</code> directory:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'@config'</span>)</span><br><span class="line"><span class="keyword">const</span> &#123;env&#125; = <span class="built_in">require</span>(<span class="string">'@helpers'</span>)</span><br><span class="line"><span class="keyword">const</span> nuxtConfig = <span class="built_in">require</span>(<span class="string">'@/nuxt.config'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">'express-session'</span>)</span><br><span class="line"><span class="keyword">const</span> cookieParser = <span class="built_in">require</span>(<span class="string">'cookie-parser'</span>)</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>)</span><br><span class="line"><span class="keyword">const</span> &#123;Nuxt, Builder&#125; = <span class="built_in">require</span>(<span class="string">'nuxt'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Initialize middlewares</span></span><br><span class="line"><span class="comment"> * @param &#123;any&#125; app</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initMiddleware</span> (<span class="params">app</span>) </span>&#123;</span><br><span class="line">  app.use(bodyParser.urlencoded(&#123;</span><br><span class="line">    extended: <span class="literal">true</span></span><br><span class="line">  &#125;))</span><br><span class="line">  app.use(bodyParser.json())</span><br><span class="line">  app.use(cookieParser())</span><br><span class="line">  app.set(<span class="string">'etag'</span>, <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Initialize session</span></span><br><span class="line"><span class="comment"> * @param &#123;any&#125; app</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initSession</span> (<span class="params">app</span>) </span>&#123;</span><br><span class="line">  app.use(session(config.session))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Initialize Nuxt</span></span><br><span class="line"><span class="comment"> * @param &#123;any&#125; app</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initNuxt</span> (<span class="params">app</span>) </span>&#123;</span><br><span class="line">  nuxtConfig.dev = !env.isProduction()</span><br><span class="line">  <span class="keyword">const</span> nuxt = <span class="keyword">new</span> Nuxt(nuxtConfig)</span><br><span class="line">  <span class="keyword">if</span> (nuxtConfig.dev) &#123;</span><br><span class="line">    <span class="keyword">new</span> Builder(nuxt).build()</span><br><span class="line">  &#125;</span><br><span class="line">  app.use(nuxt.render)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line">  initMiddleware(app)</span><br><span class="line">  initSession(app)</span><br><span class="line">  initNuxt(app)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> app</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>server/index.js</code>:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'module-alias/register'</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="built_in">require</span>(<span class="string">'@engine/express'</span>)()</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Application was started at the 3000th port`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">exports = <span class="built_in">module</span>.exports = app</span><br></pre></td></tr></table></figure></p>
<p>It looks much better now, isn’t it?<br>We also split our middlewares just for make sure we’re using it in right order.</p>
<h2 id="Express-extras"><a href="#Express-extras" class="headerlink" title="Express extras"></a>Express extras</h2><p>First of all, lets define <code>ip</code> and <code>port</code> in our configs:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ip: process.env.NODE_IP || <span class="string">'0.0.0.0'</span>,</span><br><span class="line">port: process.env.NODE_PORT || <span class="number">3000</span></span><br></pre></td></tr></table></figure></p>
<p>Now we could add little bit more logging information on server start:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'module-alias/register'</span>)</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'@config'</span>)</span><br><span class="line"><span class="keyword">const</span> logger = <span class="built_in">require</span>(<span class="string">'@engine/logger'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">'chalk'</span>)</span><br><span class="line"><span class="keyword">const</span> moment = <span class="built_in">require</span>(<span class="string">'moment'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="built_in">require</span>(<span class="string">'@engine/express'</span>)()</span><br><span class="line"></span><br><span class="line">logger.info(chalk.bold(<span class="string">'-----------------[ Server starting at %s ]-----------------'</span>), moment().format(<span class="string">'YYYY-MM-DD HH:mm:ss.SSS'</span>))</span><br><span class="line"></span><br><span class="line">app.listen(config.port, config.ip, () =&gt; &#123;</span><br><span class="line">  logger.info(<span class="string">'----------------------------[ Application started! ]----------------------------'</span>)</span><br><span class="line">  logger.info(<span class="string">`Environment:\t<span class="subst">$&#123;chalk.underline.bold(process.env.NODE_ENV)&#125;</span>`</span>)</span><br><span class="line">  logger.info(<span class="string">`IP:\t\t\t<span class="subst">$&#123;config.ip&#125;</span>`</span>)</span><br><span class="line">  logger.info(<span class="string">`Port:\t\t\t<span class="subst">$&#123;config.port&#125;</span>`</span>)</span><br><span class="line">  logger.info(<span class="string">'--------------------------------------------------------------------------------'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">exports = <span class="built_in">module</span>.exports = app</span><br></pre></td></tr></table></figure></p>
<h3 id="Compression"><a href="#Compression" class="headerlink" title="Compression"></a>Compression</h3><p>This package will compress server response.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add compression</span><br></pre></td></tr></table></figure></p>
<p>Include this into middlewares list of <code>express.js</code>:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> compress = <span class="built_in">require</span>(<span class="string">'compression'</span>)</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initMiddleware</span> (<span class="params">app</span>) </span>&#123;</span><br><span class="line">  app.use(compress(&#123;</span><br><span class="line">    filter: <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="regexp">/json|text|javascript|css/</span>.test(res.getHeader(<span class="string">'Content-Type'</span>))</span><br><span class="line">    &#125;,</span><br><span class="line">    level: <span class="number">3</span>,</span><br><span class="line">    threshold: <span class="number">512</span></span><br><span class="line">  &#125;))</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="Morgan"><a href="#Morgan" class="headerlink" title="Morgan"></a>Morgan</h3><p>It’s usefull to know what requests your server got. That’s why I recommend to include <code>morgan</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add morgan</span><br></pre></td></tr></table></figure></p>
<p><code>express.js</code>:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> logger = <span class="built_in">require</span>(<span class="string">'@engine/logger'</span>)</span><br><span class="line"><span class="keyword">const</span> morgan = <span class="built_in">require</span>(<span class="string">'morgan'</span>)</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initMiddleware</span> (<span class="params">app</span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">if</span> (env.isDev()) &#123;</span><br><span class="line">    <span class="keyword">const</span> Stream = <span class="built_in">require</span>(<span class="string">'stream'</span>).Stream</span><br><span class="line">    <span class="keyword">const</span> mlStream = <span class="keyword">new</span> Stream()</span><br><span class="line">    mlStream.writable = <span class="literal">true</span></span><br><span class="line">    mlStream.write = <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> logger.debug(data)</span><br><span class="line">    &#125;</span><br><span class="line">    app.use(morgan(<span class="string">'dev'</span>, &#123;</span><br><span class="line">      stream: mlStream</span><br><span class="line">    &#125;))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>This config using our <code>winston</code> logger for <code>morgan</code>.</p>
<h3 id="Helmet"><a href="#Helmet" class="headerlink" title="Helmet"></a>Helmet</h3><p>This little middleware adds some protection for requests to prevent some attacks.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add helmet</span><br></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> helmet = <span class="built_in">require</span>(<span class="string">'helmet'</span>)</span><br><span class="line">...</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Initiliaze Helmet security module</span></span><br><span class="line"><span class="comment"> * @param &#123;any&#125; app</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initHelmetHeaders</span> (<span class="params">app</span>) </span>&#123;</span><br><span class="line">  app.use(helmet.xssFilter())</span><br><span class="line">  app.use(helmet.noSniff())</span><br><span class="line">  app.use(helmet.frameguard())</span><br><span class="line">  app.use(helmet.ieNoOpen())</span><br><span class="line">  app.use(helmet.hidePoweredBy())</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line">  initMiddleware(app)</span><br><span class="line">  initHelmetHeaders(app)</span><br><span class="line">  initSession(app)</span><br><span class="line">  initNuxt(app)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> app</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Extra-helpers"><a href="#Extra-helpers" class="headerlink" title="Extra helpers"></a>Extra helpers</h2><h3 id="Safe-stop"><a href="#Safe-stop" class="headerlink" title="Safe stop"></a>Safe stop</h3><p>For further work we have to be sure server stopped correctly, all connections closed, etc. So let’s make new helper <code>safeStop.js</code>:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> logger = <span class="built_in">require</span>(<span class="string">'@engine/logger'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">'chalk'</span>)</span><br><span class="line"><span class="keyword">const</span> moment = <span class="built_in">require</span>(<span class="string">'moment'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> smoothExit = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> exit = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    logger.info()</span><br><span class="line">    logger.info(chalk.bold(<span class="string">'------[ Server stopped at %s Uptime: %s ]------'</span>), moment().format(<span class="string">'YYYY-MM-DD HH:mm:ss.SSS'</span>), moment.duration(process.uptime() * <span class="number">1000</span>).humanize())</span><br><span class="line">    <span class="keyword">return</span> process.exit(<span class="number">0</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> exit()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">process.on(<span class="string">'SIGINT'</span>, smoothExit).on(<span class="string">'SIGTERM'</span>, smoothExit)</span><br></pre></td></tr></table></figure></p>
<p>And call this in the <code>server/index.js</code> before <code>app.listen</code>:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'@helpers/safeStop'</span>)</span><br><span class="line">...</span><br><span class="line">app.listen(...)</span><br></pre></td></tr></table></figure></p>
<h3 id="System-info"><a href="#System-info" class="headerlink" title="System info"></a>System info</h3><p>Let’s print information about system where server started. Make <code>sysinfo.js</code> helper.<br>It require some additional packages:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add clui pretty-bytes</span><br></pre></td></tr></table></figure></p>
<p><code>server/helpers/sysinfo.js</code>:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> logger = <span class="built_in">require</span>(<span class="string">'@engine/logger'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> os = <span class="built_in">require</span>(<span class="string">'os'</span>)</span><br><span class="line"><span class="keyword">const</span> gauge = <span class="built_in">require</span>(<span class="string">'clui'</span>).Gauge</span><br><span class="line"><span class="keyword">const</span> pretty = <span class="built_in">require</span>(<span class="string">'pretty-bytes'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> total = os.totalmem()</span><br><span class="line"><span class="keyword">const</span> free = os.freemem()</span><br><span class="line"><span class="keyword">const</span> used = total - free</span><br><span class="line"><span class="keyword">const</span> human = pretty(free)</span><br><span class="line"></span><br><span class="line">logger.info(<span class="string">`CPU:\t\t\tArch: <span class="subst">$&#123;os.arch()&#125;</span>, Cores: <span class="subst">$&#123;os.cpus().length&#125;</span>`</span>)</span><br><span class="line">logger.info(<span class="string">`Memory:\t\t<span class="subst">$&#123;gauge(used, total, <span class="number">20</span>, total * <span class="number">0.8</span>, human + <span class="string">' free'</span>)&#125;</span>`</span>)</span><br><span class="line">logger.info(<span class="string">`OS:\t\t\t<span class="subst">$&#123;os.platform()&#125;</span> (<span class="subst">$&#123;os.type()&#125;</span>)`</span>)</span><br></pre></td></tr></table></figure></p>
<p>And call him after server start inside <code>app.listen</code>:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.listen(..., () =&gt; &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'@helpers/sysinfo'</span>)</span><br><span class="line">  logger.info(<span class="string">'--------------------------------------------------------------------------------'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>This part wraps up <code>03-logging-split-extras</code> git branch.</p>
]]></content>
      
        <categories>
            
            <category> full-stack </category>
            
            <category> NEMVN </category>
            
        </categories>
        
        
        <tags>
            
            <tag> express </tag>
            
            <tag> log </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Full Stack (Node + Express + MongoDb + Vue + Nuxt) application. Part 2: Helpers, Configs and Session]]></title>
      <url>/2018/02/13/02-nemvn/</url>
      <content type="html"><![CDATA[<h2 id="Helpers"><a href="#Helpers" class="headerlink" title="Helpers"></a>Helpers</h2><p>Helpers will land in <code>server/helpers</code> directory, so add an alias in <code>package.json</code> for it:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;@helpers&quot;: &quot;./server/helpers&quot;</span><br></pre></td></tr></table></figure></p>
<h3 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h3><p>Let’s add <code>env.js</code> helper which checks our environment:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  isDev () &#123;</span><br><span class="line">    <span class="keyword">return</span> !process.env.NODE_ENV || process.env.NODE_ENV === <span class="string">'development'</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  isProduction () &#123;</span><br><span class="line">    <span class="keyword">return</span> process.env.NODE_ENV === <span class="string">'production'</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  isTest () &#123;</span><br><span class="line">    <span class="keyword">return</span> process.env.NODE_ENV === <span class="string">'test'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>To export this module in easy way lets make an <code>index</code> for helpers:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> env = <span class="built_in">require</span>(<span class="string">'./env'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  env</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="Token-generator"><a href="#Token-generator" class="headerlink" title="Token generator"></a>Token generator</h3><p>Another one nifty helper intended for token generation for secrets.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add uuid-token-generator</span><br></pre></td></tr></table></figure></p>
<p><code>tokgen.js</code>:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> TokenGenerator = <span class="built_in">require</span>(<span class="string">'uuid-token-generator'</span>)</span><br><span class="line"><span class="keyword">let</span> tokgen = <span class="keyword">new</span> TokenGenerator(<span class="number">256</span>, TokenGenerator.BASE62)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> tokgen.generate()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>And extend index file for this new helper:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> env = <span class="built_in">require</span>(<span class="string">'./env'</span>)</span><br><span class="line"><span class="keyword">const</span> tokgen = <span class="built_in">require</span>(<span class="string">'./tokgen'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  env,</span><br><span class="line">  tokgen</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Configs"><a href="#Configs" class="headerlink" title="Configs"></a>Configs</h2><p>Config should be flexible, so we have to merge it into separate files:</p>
<ul>
<li><code>base.js</code> - basic configuration which should be a skeleton of config;</li>
<li><code>config.template.js</code> - <strong>template</strong> for <code>config.js</code> file, which could be used to set your own secrets. It is excluded from git, so we need a template to create new one if there’s new instance;</li>
<li><code>dev.js</code>, <code>prod.js</code> and <code>test.js</code> - confings based on environment;</li>
<li><code>index.js</code> - summary config.<br>Let’s init them with following code:<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>As an example let’s make a session config.<br><code>base.js</code>:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  session: &#123;</span><br><span class="line">    resave: <span class="literal">true</span>,</span><br><span class="line">    saveUninitialized: <span class="literal">false</span>,</span><br><span class="line">    cookie: &#123;</span><br><span class="line">      <span class="comment">// reset session after 1 week</span></span><br><span class="line">      maxAge: <span class="number">7</span> * <span class="number">24</span> * (<span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>),</span><br><span class="line">      <span class="comment">// we will use cookies just for HTTP, not js</span></span><br><span class="line">      <span class="comment">// JS will send this cookies only from current domain</span></span><br><span class="line">      httpOnly: <span class="literal">true</span>,</span><br><span class="line">      <span class="comment">// should be 'true' if you're using https</span></span><br><span class="line">      secure: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Now we have almost complete session config but <code>secret</code>. Each user have to define his own session, so lets make our template which will generate <code>secret</code> for a session if there’s no <code>config.js</code> file.<br><code>config.template.js</code>:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  session: &#123;</span><br><span class="line">    secret: <span class="string">'&#123;&#123;sessionSecret&#125;&#125;'</span>,</span><br><span class="line">    resave: <span class="literal">true</span>,</span><br><span class="line">    saveUninitialized: <span class="literal">false</span>,</span><br><span class="line">    cookie: &#123;</span><br><span class="line">      <span class="comment">// reset session after 1 week</span></span><br><span class="line">      maxAge: <span class="number">7</span> * <span class="number">24</span> * (<span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>),</span><br><span class="line">      <span class="comment">// we will use cookies just for HTTP, not js</span></span><br><span class="line">      <span class="comment">// JS will send this cookies only from current domain</span></span><br><span class="line">      httpOnly: <span class="literal">true</span>,</span><br><span class="line">      <span class="comment">// should be 'true' if you're using https</span></span><br><span class="line">      secure: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code></code> and another stuff in double braces will be replaced with provided data.<br>To improve console logging and js functionality I gonna include this modules into project:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add chalk lodash</span><br></pre></td></tr></table></figure></p>
<p>There’s how <code>index.js</code> file looks:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> _ = <span class="built_in">require</span>(<span class="string">'lodash'</span>)</span><br><span class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">'chalk'</span>)</span><br><span class="line"><span class="keyword">const</span> &#123;tokgen, env&#125; = <span class="built_in">require</span>(<span class="string">'@helpers'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> config = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">// [1]</span></span><br><span class="line">  <span class="keyword">if</span> (!fs.existsSync(path.join(__dirname, <span class="string">'config.js'</span>))) &#123;</span><br><span class="line">    <span class="built_in">console</span>.warn(chalk.yellow.bold(<span class="string">'`config.js` for server settings was not found! Generating new `config.js` file'</span>))</span><br><span class="line">    <span class="keyword">const</span> template = fs.readFileSync(path.join(__dirname, <span class="string">'config.template.js'</span>))</span><br><span class="line">    _.templateSettings.interpolate = <span class="regexp">/&#123;&#123;([\s\S]+?)&#125;&#125;/g</span></span><br><span class="line">    <span class="keyword">const</span> compiled = _.template(template)</span><br><span class="line">    <span class="keyword">const</span> replacements = &#123;</span><br><span class="line">      sessionSecret: tokgen()</span><br><span class="line">    &#125;</span><br><span class="line">    fs.writeFileSync(path.join(__dirname, <span class="string">'config.js'</span>), compiled(replacements))</span><br><span class="line">    <span class="built_in">console</span>.warn(chalk.green.bold(<span class="string">'New `config.js` for server settings file was generated. You could update your settings here: "server/config/config.js"'</span>))</span><br><span class="line">  &#125;</span><br><span class="line">  config = <span class="built_in">require</span>(<span class="string">'./config'</span>)</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="built_in">console</span>.warn(chalk.red.bold(<span class="string">'\r\n=============================================='</span>))</span><br><span class="line">  <span class="built_in">console</span>.warn(chalk.red.bold(<span class="string">'  Unable to load external `config.js` file!'</span>))</span><br><span class="line">  <span class="built_in">console</span>.warn(chalk.red.bold(<span class="string">' '</span>, error))</span><br><span class="line">  <span class="built_in">console</span>.warn(chalk.red.bold(<span class="string">'==============================================\r\n'</span>))</span><br><span class="line">  process.exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// [2]</span></span><br><span class="line"><span class="keyword">let</span> envConfig = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (env.isDev()) &#123;</span><br><span class="line">  envConfig = <span class="built_in">require</span>(<span class="string">'./dev'</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (env.isTest()) &#123;</span><br><span class="line">  envConfig = <span class="built_in">require</span>(<span class="string">'./test'</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (env.isProduction()) &#123;</span><br><span class="line">  envConfig = <span class="built_in">require</span>(<span class="string">'./prod'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// [3]</span></span><br><span class="line"><span class="keyword">const</span> base = <span class="built_in">require</span>(<span class="string">'./base'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = _.defaultsDeep(envConfig, config, base)</span><br></pre></td></tr></table></figure></p>
<p>First of all we have to check is there <code>config.js</code> [1] file exists. If no we’re reading our <code>config.template.js</code> and replace template variables with generated values and make <code>config.js</code>.<br>Next [2] we’re reading environment-based config and [3] base one, than return merged config.<br>Last thing is module alias for <code>config</code> folder:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;@config&quot;: &quot;./server/config&quot;</span><br></pre></td></tr></table></figure></p>
<h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add express-session cookie-parser body-parser</span><br></pre></td></tr></table></figure>
<p>Add using of session in our application lets extend <code>server/index.js</code> file:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'module-alias/register'</span>)</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'@config'</span>)</span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">'express-session'</span>)</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>)</span><br><span class="line"><span class="keyword">const</span> cookieParser = <span class="built_in">require</span>(<span class="string">'cookie-parser'</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> configSession = config.session</span><br><span class="line">app.use(bodyParser.urlencoded(&#123;</span><br><span class="line">  extended: <span class="literal">true</span></span><br><span class="line">&#125;))</span><br><span class="line">app.use(bodyParser.json())</span><br><span class="line">app.use(cookieParser())</span><br><span class="line">app.use(session(configSession))</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123;Nuxt, Builder&#125; = <span class="built_in">require</span>(<span class="string">'nuxt'</span>)</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p>
<p>This part wraps up <code>02-helpers-config-session</code> git branch.</p>
]]></content>
      
        <categories>
            
            <category> full-stack </category>
            
            <category> NEMVN </category>
            
        </categories>
        
        
        <tags>
            
            <tag> express </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Full Stack (Node + Express + MongoDb + Vue + Nuxt) application. Part 2: Nuxt and Expres]]></title>
      <url>/2018/02/12/01-nemvn/</url>
      <content type="html"><![CDATA[<h2 id="Nuxt"><a href="#Nuxt" class="headerlink" title="Nuxt"></a>Nuxt</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn add nuxt</span><br><span class="line">yarn add stylus stylus-loader --dev</span><br></pre></td></tr></table></figure>
<p>Lets make <code>client</code> directory in our project. It will contain whole frontend code made with <code>Nuxt</code>.<br>Also, create <code>nuxt.config.js</code> in the root folder to define Nuxt settings.<br>Lets define client directory and loader color:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  loading: &#123;<span class="attr">color</span>: <span class="string">'#3B8070'</span>&#125;,</span><br><span class="line">  srcDir: <span class="string">'client/'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Lets make a single page. Create <code>client/pages</code> directory and <code>index.vue</code> file within. Then fill this file with some test data:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        Hello #&#123;&#123; counter &#125;&#125;</span><br><span class="line">    &lt;button @click=&quot;counter = counter +1&quot;&gt;+1&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">      data () &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">          counter: 0</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;stylus&quot;&gt;</span><br><span class="line">    div</span><br><span class="line">        background-color lightblue</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p>
<h2 id="Express"><a href="#Express" class="headerlink" title="Express"></a>Express</h2><p>Lets make an entry point: in the <code>server</code> directory create <code>index.js</code>.<br>Before further work we have to install some modules:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add express</span><br></pre></td></tr></table></figure></p>
<p><code>server/index.js</code>:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'module-alias/register'</span>) <span class="comment">// Details at Part 0/Module alias </span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123;Nuxt, Builder&#125; = <span class="built_in">require</span>(<span class="string">'nuxt'</span>)</span><br><span class="line"><span class="keyword">const</span> nuxtConfig = <span class="built_in">require</span>(<span class="string">'@/nuxt.config'</span>)</span><br><span class="line">nuxtConfig.dev = process.env.NODE_ENV !== <span class="string">'production'</span></span><br><span class="line"><span class="keyword">const</span> nuxt = <span class="keyword">new</span> Nuxt(nuxtConfig)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (nuxtConfig.dev) &#123;</span><br><span class="line">  <span class="keyword">new</span> Builder(nuxt).build()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.use(nuxt.render)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Application was started at the 3000th port`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">exports = <span class="built_in">module</span>.exports = app</span><br></pre></td></tr></table></figure></p>
<p>Now we should modify our <code>package.json</code> and set our main script to <code>server/index.js</code>.<br>That’s all. Now we can run our server with <code>yarn run</code> and we’ll got simple page located on <code>http://localhost:3000</code>.<br>This part wraps up <code>01-nuxt-express</code> git branch.</p>
]]></content>
      
        <categories>
            
            <category> full-stack </category>
            
            <category> NEMVN </category>
            
        </categories>
        
        
        <tags>
            
            <tag> nuxt </tag>
            
            <tag> express </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Full Stack (Node + Express + MongoDb + Vue + Nuxt) application. Part 0: Usefull stuff]]></title>
      <url>/2018/02/12/00-nemvn/</url>
      <content type="html"><![CDATA[<h2 id="Begin"><a href="#Begin" class="headerlink" title="Begin"></a>Begin</h2><p>To start new project create new directory and run this commends to init node application and git:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn init</span><br><span class="line">git init</span><br></pre></td></tr></table></figure></p>
<p>I will use <code>yarn</code>, but you could use <code>npm</code>, commands are mostly the same.<br>To configure git lets add <code>.gitignore</code> file:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">################################################</span><br><span class="line"># Dependencies</span><br><span class="line">################################################</span><br><span class="line"></span><br><span class="line">node_modules</span><br><span class="line"></span><br><span class="line">################################################</span><br><span class="line"># Node.js / NPM</span><br><span class="line">################################################</span><br><span class="line"></span><br><span class="line">lib-cov</span><br><span class="line">*.seed</span><br><span class="line">*.log</span><br><span class="line">*.out</span><br><span class="line">*.pid</span><br><span class="line">npm-debug.log</span><br><span class="line"></span><br><span class="line">################################################</span><br><span class="line"># Miscellaneous</span><br><span class="line">################################################</span><br><span class="line"></span><br><span class="line">*~</span><br><span class="line">*#</span><br><span class="line">.DS_STORE</span><br><span class="line">.netbeans</span><br><span class="line">nbproject</span><br><span class="line">.idea</span><br><span class="line">.node_history</span><br><span class="line">dump.rdb</span><br><span class="line">.nuxt</span><br><span class="line">.vscode</span><br></pre></td></tr></table></figure></p>
<h2 id="Linter"><a href="#Linter" class="headerlink" title="Linter"></a>Linter</h2><p>Let’s add some style check:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn add eslint</span><br><span class="line">.\node_modules\.bin\eslint --init</span><br><span class="line">yarn install</span><br></pre></td></tr></table></figure></p>
<p>We will use <code>Standard</code> style guide in JSON format.<br>Let’s expand it little bit:<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"env"</span>: &#123;</span><br><span class="line">        <span class="attr">"es6"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"node"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"mocha"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"parserOptions"</span>: &#123;</span><br><span class="line">        <span class="attr">"ecmaVersion"</span>: <span class="number">8</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"extends"</span>: <span class="string">"standard"</span>,</span><br><span class="line">    <span class="attr">"rules"</span>: &#123;</span><br><span class="line">        <span class="attr">"arrow-parens"</span>: [<span class="string">"error"</span>, <span class="string">"as-needed"</span>],</span><br><span class="line">        <span class="attr">"linebreak-style"</span>: [<span class="string">"error"</span>, <span class="string">"unix"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>It will extend our environment, set ECMA Script version to 8th and define some rules.</p>
<h2 id="Module-alias"><a href="#Module-alias" class="headerlink" title="Module alias"></a>Module alias</h2><p>Working with relative path is kidna hard, so lets make it easier:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add module-alias</span><br></pre></td></tr></table></figure></p>
<p>Now we can define aliases which will makes relative paths looks like absolute one.<br>In the <code>package.json</code> we could add new section <code>_moduleAliases</code> and define some paths:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;_moduleAliases&quot;: &#123;</span><br><span class="line">  &quot;@&quot;: &quot;.&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>@ - root path</li>
</ul>
<h2 id="Cross-env-variables"><a href="#Cross-env-variables" class="headerlink" title="Cross env variables"></a>Cross env variables</h2><p>To define node environment variables in <code>package.json</code> you could send it before running node by itself, but in the windows it won’t work, so let’s fix that:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add cross-env</span><br></pre></td></tr></table></figure></p>
<p>Now we can add some scripts:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;start&quot;: &quot;nuxt build &amp; cross-env NODE_ENV=production node server/index.js&quot;,</span><br><span class="line">&quot;dev&quot;: &quot;node server/index.js&quot;</span><br></pre></td></tr></table></figure></p>
<h2 id="Handling-date-and-time"><a href="#Handling-date-and-time" class="headerlink" title="Handling date and time"></a>Handling date and time</h2><p>Let’s use <code>moment</code> package for date and time:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add moment</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> full-stack </category>
            
            <category> NEMVN </category>
            
        </categories>
        
        
        <tags>
            
            <tag> eslint </tag>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
