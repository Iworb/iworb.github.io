{"pages":[{"title":"About","permalink":"http://iworb.github.io/about/index.html","text":""},{"title":"Tags","permalink":"http://iworb.github.io/tags/index.html","text":""}],"posts":[{"title":"Full Stack (Node + Express + MongoDb + Vue + Nuxt) application. Part 2: Helpers, Configs and Session","permalink":"http://iworb.github.io/2018/02/12/02-nemvn/","text":"HelpersHelpers will land in server/helpers directory, so add an alias in package.json for it:1&quot;@helpers&quot;: &quot;./server/helpers&quot; EnvironmentLet’s add env.js helper which checks our environment:12345678910111213module.exports = &#123; isDev () &#123; return !process.env.NODE_ENV || process.env.NODE_ENV === 'development' &#125;, isProduction () &#123; return process.env.NODE_ENV === 'production' &#125;, isTest () &#123; return process.env.NODE_ENV === 'test' &#125;&#125; To export this module in easy way lets make an index for helpers:12345const env = require('./env')module.exports = &#123; env&#125; Token generatorAnother one nifty helper intended for token generation for secrets.1yarn add uuid-token-generator tokgen.js:123456let TokenGenerator = require('uuid-token-generator')let tokgen = new TokenGenerator(256, TokenGenerator.BASE62)module.exports = function () &#123; return tokgen.generate()&#125; And extend index file for this new helper:1234567const env = require('./env')const tokgen = require('./tokgen')module.exports = &#123; env, tokgen&#125; ConfigsConfig should be flexible, so we have to merge it into separate files: base.js - basic configuration which should be a skeleton of config; config.template.js - template for config.js file, which could be used to set your own secrets. It is excluded from git, so we need a template to create new one if there’s new instance; dev.js, prod.js and test.js - confings based on environment; index.js - summary config.Let’s init them with following code:1module.exports = &#123;&#125; As an example let’s make a session config.base.js:123456789101112131415module.exports = &#123; session: &#123; resave: true, saveUninitialized: false, cookie: &#123; // reset session after 1 week maxAge: 7 * 24 * (60 * 60 * 1000), // we will use cookies just for HTTP, not js // JS will send this cookies only from current domain httpOnly: true, // should be 'true' if you're using https secure: false &#125; &#125;&#125; Now we have almost complete session config but secret. Each user have to define his own session, so lets make our template which will generate secret for a session if there’s no config.js file.config.template.js:12345678910111213141516module.exports = &#123; session: &#123; secret: '&#123;&#123;sessionSecret&#125;&#125;', resave: true, saveUninitialized: false, cookie: &#123; // reset session after 1 week maxAge: 7 * 24 * (60 * 60 * 1000), // we will use cookies just for HTTP, not js // JS will send this cookies only from current domain httpOnly: true, // should be 'true' if you're using https secure: false &#125; &#125;&#125; and another stuff in double braces will be replaced with provided data.To improve console logging and js functionality I gonna include this modules into project:1yarn add chalk lodash There’s how index.js file looks:123456789101112131415161718192021222324252627282930313233343536373839404142434445const path = require('path')const fs = require('fs')const _ = require('lodash')const chalk = require('chalk')const &#123;tokgen, env&#125; = require('@helpers')let config = &#123;&#125;try &#123; // [1] if (!fs.existsSync(path.join(__dirname, 'config.js'))) &#123; console.warn(chalk.yellow.bold('`config.js` for server settings was not found! Generating new `config.js` file')) const template = fs.readFileSync(path.join(__dirname, 'config.template.js')) _.templateSettings.interpolate = /&#123;&#123;([\\s\\S]+?)&#125;&#125;/g const compiled = _.template(template) const replacements = &#123; sessionSecret: tokgen() &#125; fs.writeFileSync(path.join(__dirname, 'config.js'), compiled(replacements)) console.warn(chalk.green.bold('New `config.js` for server settings file was generated. You could update your settings here: \"server/config/config.js\"')) &#125; config = require('./config')&#125; catch (error) &#123; console.warn(chalk.red.bold('\\r\\n==============================================')) console.warn(chalk.red.bold(' Unable to load external `config.js` file!')) console.warn(chalk.red.bold(' ', error)) console.warn(chalk.red.bold('==============================================\\r\\n')) process.exit(1)&#125;// [2]let envConfig = &#123;&#125;if (env.isDev()) &#123; envConfig = require('./dev')&#125; else if (env.isTest()) &#123; envConfig = require('./test')&#125; else if (env.isProduction()) &#123; envConfig = require('./prod')&#125;// [3]const base = require('./base')module.exports = _.defaultsDeep(envConfig, config, base) First of all we have to check is there config.js [1] file exists. If no we’re reading our config.template.js and replace template variables with generated values and make config.js.Next [2] we’re reading environment-based config and [3] base one, than return merged config.Last thing is module alias for config folder:1&quot;@config&quot;: &quot;./server/config&quot; Session1yarn add express-session cookie-parser body-parser Add using of session in our application lets extend server/index.js file:123456789101112131415161718require('module-alias/register')const config = require('@config')const express = require('express')const session = require('express-session')const bodyParser = require('body-parser')const cookieParser = require('cookie-parser')const app = express()const configSession = config.sessionapp.use(bodyParser.urlencoded(&#123; extended: true&#125;))app.use(bodyParser.json())app.use(cookieParser())app.use(session(configSession))const &#123;Nuxt, Builder&#125; = require('nuxt')... This part wraps up 02-helpers-config-session git branch."},{"title":"Full Stack (Node + Express + MongoDb + Vue + Nuxt) application. Part 2: Nuxt and Expres","permalink":"http://iworb.github.io/2018/02/12/01-nemvn/","text":"Nuxt12yarn add nuxtyarn add stylus stylus-loader --dev Lets make client directory in our project. It will contain whole frontend code made with Nuxt.Also, create nuxt.config.js in the root folder to define Nuxt settings.Lets define client directory and loader color:1234module.exports = &#123; loading: &#123;color: '#3B8070'&#125;, srcDir: 'client/'&#125; Lets make a single page. Create client/pages directory and index.vue file within. Then fill this file with some test data:123456789101112131415161718192021&lt;template&gt; &lt;div&gt; Hello #&#123;&#123; counter &#125;&#125; &lt;button @click=&quot;counter = counter +1&quot;&gt;+1&lt;/button&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt; export default &#123; data () &#123; return &#123; counter: 0 &#125; &#125; &#125;&lt;/script&gt;&lt;style lang=&quot;stylus&quot;&gt; div background-color lightblue&lt;/style&gt; ExpressLets make an entry point: in the server directory create index.js.Before further work we have to install some modules:1yarn add express server/index.js:1234567891011121314151617181920require('module-alias/register') // Details at Part 0/Module alias const express = require('express')const app = express()const &#123;Nuxt, Builder&#125; = require('nuxt')const nuxtConfig = require('@/nuxt.config')nuxtConfig.dev = process.env.NODE_ENV !== 'production'const nuxt = new Nuxt(nuxtConfig)if (nuxtConfig.dev) &#123; new Builder(nuxt).build()&#125;app.use(nuxt.render)app.listen(3000, () =&gt; &#123; console.log(`Application was started at the 3000th port`)&#125;)exports = module.exports = app Now we should modify our package.json and set our main script to server/index.js.That’s all. Now we can run our server with yarn run and we’ll got simple page located on http://localhost:3000.This part wraps up 01-nuxt-express git branch."},{"title":"Full Stack (Node + Express + MongoDb + Vue + Nuxt) application. Part 0: Usefull stuff","permalink":"http://iworb.github.io/2018/02/12/00-nemvn/","text":"BeginTo start new project create new directory and run this commends to init node application and git:12yarn initgit init I will use yarn, but you could use npm, commands are mostly the same.To configure git lets add .gitignore file:12345678910111213141516171819202122232425262728293031################################################# Dependencies################################################node_modules################################################# Node.js / NPM################################################lib-cov*.seed*.log*.out*.pidnpm-debug.log################################################# Miscellaneous################################################*~*#.DS_STORE.netbeansnbproject.idea.node_historydump.rdb.nuxt.vscode LinterLet’s add some style check:123yarn add eslint.\\node_modules\\.bin\\eslint --inityarn install We will use Standard style guide in JSON format.Let’s expand it little bit:123456789101112131415&#123; \"env\": &#123; \"es6\": true, \"node\": true, \"mocha\": true &#125;, \"parserOptions\": &#123; \"ecmaVersion\": 8 &#125;, \"extends\": \"standard\", \"rules\": &#123; \"arrow-parens\": [\"error\", \"as-needed\"], \"linebreak-style\": [\"error\", \"unix\"] &#125;&#125; It will extend our environment, set ECMA Script version to 8th and define some rules. Module aliasWorking with relative path is kidna hard, so lets make it easier:1yarn add module-alias Now we can define aliases which will makes relative paths looks like absolute one.In the package.json we could add new section _moduleAliases and define some paths:123&quot;_moduleAliases&quot;: &#123; &quot;@&quot;: &quot;.&quot;&#125; @ - root path Cross env variablesTo define node environment variables in package.json you could send it before running node by itself, but in the windows it won’t work, so let’s fix that:1yarn add cross-env Now ce can add some scripts:12&quot;start&quot;: &quot;nuxt build &amp; cross-env NODE_ENV=production node server/index.js&quot;,&quot;dev&quot;: &quot;node server/index.js&quot;"}]}