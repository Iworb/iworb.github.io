{"pages":[{"title":"About","permalink":"http://iworb.github.io/about/index.html","text":""},{"title":"Tags","permalink":"http://iworb.github.io/tags/index.html","text":""}],"posts":[{"title":"Full Stack (Node + Express + MongoDb + Vue + Nuxt) application. Part 4: MongoDb","permalink":"http://iworb.github.io/2018/02/13/04-nemvn/","text":"[WIP]"},{"title":"Full Stack (Node + Express + MongoDb + Vue + Nuxt) application. Part 3: Logging, initialization splitting and more helpers","permalink":"http://iworb.github.io/2018/02/13/03-nemvn/","text":"LoggingConsole logging is good, but it doesn’t cover all needs. Server could turn off instantly and you won’t see any messages, or there’s plenty errors and you have no time to read a single one, etc.Let’s take a look for other logging variations.There’s already good module to achieve different behaviours:1yarn add winston Files, belong using for init our application and other nifty functions which require config will land into server/engine directory. Make sure to include it into your module aliases list:1&quot;@engine&quot;: &quot;./server/engine&quot; Lets make a new file logger.js with console output:12345678910111213141516171819202122232425262728const winston = require('winston')const config = require('@config')const &#123;env&#125; = require('@helpers')const transports = []/** * Console transporter */transports.push(new winston.transports.Console(&#123; level: config.logging.console.level, colorize: true, prettyPrint: true, handleExceptions: env.isProduction()&#125;))// [before]const logger = new winston.Logger(&#123; level: 'debug', transports: transports, exitOnError: false&#125;)// [after]module.exports = logger As you can see we’re using config.logging.console.level variable to define level of console logging. Let’s extend our config.template.js for logging:12345logging: &#123; console: &#123; level: 'debug' &#125;&#125; We could redefine this level for some environments. For production we could use this:12345logging: &#123; console: &#123; level: 'error' &#125;&#125; Further loggers require some additional packages to install, some config and init function which should be placed [before] or [after] logger init. File [before]packages:1yarn add mkdirp winston-daily-rotate-file config:1234567file: &#123; enabled: true, path: path.normalize(path.join(__dirname, '..', '..', 'logs')), level: 'info', json: false, exceptionFile: true&#125; NB: you should add const path = require(&#39;path&#39;) at the begin of your config files if you use path.init:123456789101112131415161718192021222324252627282930313233const path = require('path')const fs = require('fs')const mkdirp = require('mkdirp')/** * File transporter */if (config.logging.file.enabled) &#123; // Create logs directory const logDir = config.logging.file.path if (!fs.existsSync(logDir)) &#123; mkdirp(logDir) &#125; transports.push(new (require('winston-daily-rotate-file'))(&#123; filename: path.join(logDir, 'server.log'), level: config.logging.file.level || 'info', timestamp: true, json: config.logging.file.json || false, handleExceptions: true &#125;)) if (config.logging.file.exceptionFile) &#123; transports.push(new winston.transports.File(&#123; filename: path.join(logDir, 'exceptions.log'), level: 'error', timestamp: true, json: config.logging.file.json || false, prettyPrint: true, handleExceptions: true, humanReadableUnhandledException: true &#125;)) &#125;&#125; Logentries [before]packages:1yarn add le_node config:1234logentries: &#123; enabled: false, token: null&#125; init:123456789101112/** * Logentries transporter * https://logentries.com/ */if (config.logging.logentries.enabled &amp;&amp; config.logging.logentries.token) &#123; console.log('Logentries log transport enabled!') require('le_node') transports.push(new winston.transports.Logentries(&#123; level: 'debug', token: config.logging.logentries.token &#125;))&#125; Papertrail [before]packages:1yarn add winston-papertrail config:1234567papertrail: &#123; enabled: false, host: null, port: null, level: 'debug', program: 'vem'&#125; init:12345678910/** * Papertrail transporter * https://papertrailapp.com/ */if (config.logging.papertrail.enabled) &#123; console.log('Papertrail log transport enabled!') // eslint-disable-next-line no-unused-expressions require('winston-papertrail').Papertrail transports.push(new winston.transports.Papertrail(config.logging.papertrail))&#125; Loggly [after]packages:1yarn add winston-loggly-bulk config:1234567loggly: &#123; enabled: false, token: null, subdomain: null, tags: [], json: true&#125; init:1234567891011121314/** * Loggly transporter * https://www.loggly.com/ */if (config.logging.loggly.enabled &amp;&amp; config.logging.loggly.token) &#123; console.log('Loggly log transport enabled!') require('winston-loggly-bulk') logger.add(winston.transports.Loggly, &#123; inputToken: config.logging.loggly.token, subdomain: config.logging.loggly.subdomain, tags: config.logging.loggly.tags, json: config.logging.loggly.json &#125;)&#125; Logsene [after]packages:1yarn add winston-logsene config:1234logsene: &#123; enabled: false, token: null&#125; init:123456789101112/** * Logsene transporter * https://sematext.com/logsene/ */if (config.logging.logsene.enabled &amp;&amp; config.logging.logsene.token) &#123; console.log('Logsene log transport enabled!') const logsene = require('winston-logsene') logger.add(logsene, &#123; type: 'vem-server', token: config.logging.logsene.token &#125;)&#125; Logz.io [after]packages:1yarn add winston-logzio config:1234logzio: &#123; enabled: false, token: null&#125; init:1234567891011/** * Logz.io transporter * https://logz.io/ */if (config.logging.logzio.enabled &amp;&amp; config.logging.logzio.token) &#123; console.log('Logz.io log transport enabled!') const logzio = require('winston-logzio') logger.add(logzio, &#123; token: config.logging.logzio.token &#125;)&#125; Graylog [after]packages:1yarn add winston-graylog2 config:12345graylog: &#123; enabled: false, servers: [&#123;host: '192.168.1.100', port: 12201&#125;], facility: 'MEVN'&#125; init:12345678910111213141516/** * Graylog transporter * https://www.graylog.org/ */if (config.logging.graylog.enabled) &#123; console.log('Graylog log transport enabled! Servers: ' + JSON.stringify(config.logging.graylog.servers)) let graylog = require('winston-graylog2') logger.add(graylog, &#123; name: 'Graylog', level: 'debug', graylog: &#123; servers: config.logging.graylog.servers, facility: config.logging.graylog.facility &#125; &#125;)&#125; Entry pointOur server/index.js intended for complete server init and have a lot of stuff to init to. Now there’s just express, sessions and nuxt init, but this file will grow. Best practice is split this file.We already have an engine directory, so let’s move our express initialization into express.js file located in the engine directory:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253const config = require('@config')const &#123;env&#125; = require('@helpers')const nuxtConfig = require('@/nuxt.config')const express = require('express')const session = require('express-session')const cookieParser = require('cookie-parser')const bodyParser = require('body-parser')const &#123;Nuxt, Builder&#125; = require('nuxt')/** * Initialize middlewares * @param &#123;any&#125; app */function initMiddleware (app) &#123; app.use(bodyParser.urlencoded(&#123; extended: true &#125;)) app.use(bodyParser.json()) app.use(cookieParser()) app.set('etag', true)&#125;/** * Initialize session * @param &#123;any&#125; app */function initSession (app) &#123; app.use(session(config.session))&#125;/** * Initialize Nuxt * @param &#123;any&#125; app */function initNuxt (app) &#123; nuxtConfig.dev = !env.isProduction() const nuxt = new Nuxt(nuxtConfig) if (nuxtConfig.dev) &#123; new Builder(nuxt).build() &#125; app.use(nuxt.render)&#125;module.exports = () =&gt; &#123; const app = express() initMiddleware(app) initSession(app) initNuxt(app) return app&#125; server/index.js:12345678require('module-alias/register')const app = require('@engine/express')()app.listen(3000, () =&gt; &#123; console.log(`Application was started at the 3000th port`)&#125;)exports = module.exports = app It looks much better now, isn’t it?We also split our middlewares just for make sure we’re using it in right order. Express extrasFirst of all, lets define ip and port in our configs:12ip: process.env.NODE_IP || '0.0.0.0',port: process.env.NODE_PORT || 3000 Now we could add little bit more logging information on server start:1234567891011121314151617181920require('module-alias/register')const config = require('@config')const logger = require('@engine/logger')const chalk = require('chalk')const moment = require('moment')const app = require('@engine/express')()logger.info(chalk.bold('-----------------[ Server starting at %s ]-----------------'), moment().format('YYYY-MM-DD HH:mm:ss.SSS'))app.listen(config.port, config.ip, () =&gt; &#123; logger.info('----------------------------[ Application started! ]----------------------------') logger.info(`Environment:\\t$&#123;chalk.underline.bold(process.env.NODE_ENV)&#125;`) logger.info(`IP:\\t\\t\\t$&#123;config.ip&#125;`) logger.info(`Port:\\t\\t\\t$&#123;config.port&#125;`) logger.info('--------------------------------------------------------------------------------')&#125;)exports = module.exports = app CompressionThis package will compress server response.1yarn add compression Include this into middlewares list of express.js:123456789101112const compress = require('compression')...function initMiddleware (app) &#123; app.use(compress(&#123; filter: (req, res) =&gt; &#123; return /json|text|javascript|css/.test(res.getHeader('Content-Type')) &#125;, level: 3, threshold: 512 &#125;)) ...&#125; MorganIt’s usefull to know what requests your server got. That’s why I recommend to include morgan:1yarn add morgan express.js:1234567891011121314151617const logger = require('@engine/logger')const morgan = require('morgan')...function initMiddleware (app) &#123; ... if (env.isDev()) &#123; const Stream = require('stream').Stream const mlStream = new Stream() mlStream.writable = true mlStream.write = data =&gt; &#123; return logger.debug(data) &#125; app.use(morgan('dev', &#123; stream: mlStream &#125;)) &#125;&#125; This config using our winston logger for morgan. HelmetThis little middleware adds some protection for requests to prevent some attacks.1yarn add helmet 123456789101112131415161718192021222324const helmet = require('helmet').../** * Initiliaze Helmet security module * @param &#123;any&#125; app */function initHelmetHeaders (app) &#123; app.use(helmet.xssFilter()) app.use(helmet.noSniff()) app.use(helmet.frameguard()) app.use(helmet.ieNoOpen()) app.use(helmet.hidePoweredBy())&#125;...module.exports = () =&gt; &#123; const app = express() initMiddleware(app) initHelmetHeaders(app) initSession(app) initNuxt(app) return app&#125; Extra helpersSafe stopFor further work we have to be sure server stopped correctly, all connections closed, etc. So let’s make new helper safeStop.js:123456789101112131415const logger = require('@engine/logger')const chalk = require('chalk')const moment = require('moment')const smoothExit = async () =&gt; &#123; const exit = () =&gt; &#123; logger.info() logger.info(chalk.bold('------[ Server stopped at %s Uptime: %s ]------'), moment().format('YYYY-MM-DD HH:mm:ss.SSS'), moment.duration(process.uptime() * 1000).humanize()) return process.exit(0) &#125; return exit()&#125;process.on('SIGINT', smoothExit).on('SIGTERM', smoothExit) And call this in the server/index.js before app.listen:123require('@helpers/safeStop')...app.listen(...) System infoLet’s print information about system where server started. Make sysinfo.js helper.It require some additional packages:1yarn add clui pretty-bytes server/helpers/sysinfo.js:1234567891011121314const logger = require('@engine/logger')const os = require('os')const gauge = require('clui').Gaugeconst pretty = require('pretty-bytes')const total = os.totalmem()const free = os.freemem()const used = total - freeconst human = pretty(free)logger.info(`CPU:\\t\\t\\tArch: $&#123;os.arch()&#125;, Cores: $&#123;os.cpus().length&#125;`)logger.info(`Memory:\\t\\t$&#123;gauge(used, total, 20, total * 0.8, human + ' free')&#125;`)logger.info(`OS:\\t\\t\\t$&#123;os.platform()&#125; ($&#123;os.type()&#125;)`) And call him after server start inside app.listen:12345app.listen(..., () =&gt; &#123; ... require('@helpers/sysinfo') logger.info('--------------------------------------------------------------------------------')&#125;) This part wraps up 03-logging-split-extras git branch."},{"title":"Full Stack (Node + Express + MongoDb + Vue + Nuxt) application. Part 2: Helpers, Configs and Session","permalink":"http://iworb.github.io/2018/02/13/02-nemvn/","text":"HelpersHelpers will land in server/helpers directory, so add an alias in package.json for it:1&quot;@helpers&quot;: &quot;./server/helpers&quot; EnvironmentLet’s add env.js helper which checks our environment:12345678910111213module.exports = &#123; isDev () &#123; return !process.env.NODE_ENV || process.env.NODE_ENV === 'development' &#125;, isProduction () &#123; return process.env.NODE_ENV === 'production' &#125;, isTest () &#123; return process.env.NODE_ENV === 'test' &#125;&#125; To export this module in easy way lets make an index for helpers:12345const env = require('./env')module.exports = &#123; env&#125; Token generatorAnother one nifty helper intended for token generation for secrets.1yarn add uuid-token-generator tokgen.js:123456let TokenGenerator = require('uuid-token-generator')let tokgen = new TokenGenerator(256, TokenGenerator.BASE62)module.exports = function () &#123; return tokgen.generate()&#125; And extend index file for this new helper:1234567const env = require('./env')const tokgen = require('./tokgen')module.exports = &#123; env, tokgen&#125; ConfigsConfig should be flexible, so we have to merge it into separate files: base.js - basic configuration which should be a skeleton of config; config.template.js - template for config.js file, which could be used to set your own secrets. It is excluded from git, so we need a template to create new one if there’s new instance; dev.js, prod.js and test.js - confings based on environment; index.js - summary config.Let’s init them with following code:1module.exports = &#123;&#125; As an example let’s make a session config.base.js:123456789101112131415module.exports = &#123; session: &#123; resave: true, saveUninitialized: false, cookie: &#123; // reset session after 1 week maxAge: 7 * 24 * (60 * 60 * 1000), // we will use cookies just for HTTP, not js // JS will send this cookies only from current domain httpOnly: true, // should be 'true' if you're using https secure: false &#125; &#125;&#125; Now we have almost complete session config but secret. Each user have to define his own session, so lets make our template which will generate secret for a session if there’s no config.js file.config.template.js:12345678910111213141516module.exports = &#123; session: &#123; secret: '&#123;&#123;sessionSecret&#125;&#125;', resave: true, saveUninitialized: false, cookie: &#123; // reset session after 1 week maxAge: 7 * 24 * (60 * 60 * 1000), // we will use cookies just for HTTP, not js // JS will send this cookies only from current domain httpOnly: true, // should be 'true' if you're using https secure: false &#125; &#125;&#125; and another stuff in double braces will be replaced with provided data.To improve console logging and js functionality I gonna include this modules into project:1yarn add chalk lodash There’s how index.js file looks:123456789101112131415161718192021222324252627282930313233343536373839404142434445const path = require('path')const fs = require('fs')const _ = require('lodash')const chalk = require('chalk')const &#123;tokgen, env&#125; = require('@helpers')let config = &#123;&#125;try &#123; // [1] if (!fs.existsSync(path.join(__dirname, 'config.js'))) &#123; console.warn(chalk.yellow.bold('`config.js` for server settings was not found! Generating new `config.js` file')) const template = fs.readFileSync(path.join(__dirname, 'config.template.js')) _.templateSettings.interpolate = /&#123;&#123;([\\s\\S]+?)&#125;&#125;/g const compiled = _.template(template) const replacements = &#123; sessionSecret: tokgen() &#125; fs.writeFileSync(path.join(__dirname, 'config.js'), compiled(replacements)) console.warn(chalk.green.bold('New `config.js` for server settings file was generated. You could update your settings here: \"server/config/config.js\"')) &#125; config = require('./config')&#125; catch (error) &#123; console.warn(chalk.red.bold('\\r\\n==============================================')) console.warn(chalk.red.bold(' Unable to load external `config.js` file!')) console.warn(chalk.red.bold(' ', error)) console.warn(chalk.red.bold('==============================================\\r\\n')) process.exit(1)&#125;// [2]let envConfig = &#123;&#125;if (env.isDev()) &#123; envConfig = require('./dev')&#125; else if (env.isTest()) &#123; envConfig = require('./test')&#125; else if (env.isProduction()) &#123; envConfig = require('./prod')&#125;// [3]const base = require('./base')module.exports = _.defaultsDeep(envConfig, config, base) First of all we have to check is there config.js [1] file exists. If no we’re reading our config.template.js and replace template variables with generated values and make config.js.Next [2] we’re reading environment-based config and [3] base one, than return merged config.Last thing is module alias for config folder:1&quot;@config&quot;: &quot;./server/config&quot; Session1yarn add express-session cookie-parser body-parser Add using of session in our application lets extend server/index.js file:123456789101112131415161718require('module-alias/register')const config = require('@config')const express = require('express')const session = require('express-session')const bodyParser = require('body-parser')const cookieParser = require('cookie-parser')const app = express()const configSession = config.sessionapp.use(bodyParser.urlencoded(&#123; extended: true&#125;))app.use(bodyParser.json())app.use(cookieParser())app.use(session(configSession))const &#123;Nuxt, Builder&#125; = require('nuxt')... This part wraps up 02-helpers-config-session git branch."},{"title":"Full Stack (Node + Express + MongoDb + Vue + Nuxt) application. Part 2: Nuxt and Expres","permalink":"http://iworb.github.io/2018/02/12/01-nemvn/","text":"Nuxt12yarn add nuxtyarn add stylus stylus-loader --dev Lets make client directory in our project. It will contain whole frontend code made with Nuxt.Also, create nuxt.config.js in the root folder to define Nuxt settings.Lets define client directory and loader color:1234module.exports = &#123; loading: &#123;color: '#3B8070'&#125;, srcDir: 'client/'&#125; Lets make a single page. Create client/pages directory and index.vue file within. Then fill this file with some test data:123456789101112131415161718192021&lt;template&gt; &lt;div&gt; Hello #&#123;&#123; counter &#125;&#125; &lt;button @click=&quot;counter = counter +1&quot;&gt;+1&lt;/button&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt; export default &#123; data () &#123; return &#123; counter: 0 &#125; &#125; &#125;&lt;/script&gt;&lt;style lang=&quot;stylus&quot;&gt; div background-color lightblue&lt;/style&gt; ExpressLets make an entry point: in the server directory create index.js.Before further work we have to install some modules:1yarn add express server/index.js:1234567891011121314151617181920require('module-alias/register') // Details at Part 0/Module alias const express = require('express')const app = express()const &#123;Nuxt, Builder&#125; = require('nuxt')const nuxtConfig = require('@/nuxt.config')nuxtConfig.dev = process.env.NODE_ENV !== 'production'const nuxt = new Nuxt(nuxtConfig)if (nuxtConfig.dev) &#123; new Builder(nuxt).build()&#125;app.use(nuxt.render)app.listen(3000, () =&gt; &#123; console.log(`Application was started at the 3000th port`)&#125;)exports = module.exports = app Now we should modify our package.json and set our main script to server/index.js.That’s all. Now we can run our server with yarn run and we’ll got simple page located on http://localhost:3000.This part wraps up 01-nuxt-express git branch."},{"title":"Full Stack (Node + Express + MongoDb + Vue + Nuxt) application. Part 0: Usefull stuff","permalink":"http://iworb.github.io/2018/02/12/00-nemvn/","text":"BeginTo start new project create new directory and run this commends to init node application and git:12yarn initgit init I will use yarn, but you could use npm, commands are mostly the same.To configure git lets add .gitignore file:12345678910111213141516171819202122232425262728293031################################################# Dependencies################################################node_modules################################################# Node.js / NPM################################################lib-cov*.seed*.log*.out*.pidnpm-debug.log################################################# Miscellaneous################################################*~*#.DS_STORE.netbeansnbproject.idea.node_historydump.rdb.nuxt.vscode LinterLet’s add some style check:123yarn add eslint.\\node_modules\\.bin\\eslint --inityarn install We will use Standard style guide in JSON format.Let’s expand it little bit:123456789101112131415&#123; \"env\": &#123; \"es6\": true, \"node\": true, \"mocha\": true &#125;, \"parserOptions\": &#123; \"ecmaVersion\": 8 &#125;, \"extends\": \"standard\", \"rules\": &#123; \"arrow-parens\": [\"error\", \"as-needed\"], \"linebreak-style\": [\"error\", \"unix\"] &#125;&#125; It will extend our environment, set ECMA Script version to 8th and define some rules. Module aliasWorking with relative path is kidna hard, so lets make it easier:1yarn add module-alias Now we can define aliases which will makes relative paths looks like absolute one.In the package.json we could add new section _moduleAliases and define some paths:123&quot;_moduleAliases&quot;: &#123; &quot;@&quot;: &quot;.&quot;&#125; @ - root path Cross env variablesTo define node environment variables in package.json you could send it before running node by itself, but in the windows it won’t work, so let’s fix that:1yarn add cross-env Now we can add some scripts:12&quot;start&quot;: &quot;nuxt build &amp; cross-env NODE_ENV=production node server/index.js&quot;,&quot;dev&quot;: &quot;node server/index.js&quot; Handling date and timeLet’s use moment package for date and time:1yarn add moment"}]}